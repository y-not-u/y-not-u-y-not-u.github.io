<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>王豆豆的人生旅途</title>
  
  <subtitle>vogan&#39;s blog</subtitle>
  <link href="https://www.vatery.com/atom.xml" rel="self"/>
  
  <link href="https://www.vatery.com/"/>
  <updated>2024-06-08T10:16:37.702Z</updated>
  <id>https://www.vatery.com/</id>
  
  <author>
    <name>Vogan</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Corepack 怎么使用？</title>
    <link href="https://www.vatery.com/2024/06/08/what-is-corepack/"/>
    <id>https://www.vatery.com/2024/06/08/what-is-corepack/</id>
    <published>2024-06-08T09:49:58.000Z</published>
    <updated>2024-06-08T10:16:37.702Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是-Corepack"><a href="#什么是-Corepack" class="headerlink" title="什么是 Corepack"></a>什么是 Corepack</h2><p><img src="https://img.vatery.com/file/7e5b3a5699af7a718ac0a.png" alt="corepack"><br>Corepack 是一个将 Node.js 与“包管理器”绑定在一起的工具，能够更容易的指定使用的“包管理器”版本。 (<em>Corepack 已经从 Node.js 14.19 版本开始默认携带发布</em>)</p><p>那么我们需要使用 Corepack 吗？</p><span id="more"></span><h2 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h2><ol><li>首先需要安装</li></ol><p>如果你使用 Node.js 14.19 版本之后，那么已经不需要额外安装。</p><p>下一步则是启用 Corepack：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">corepack <span class="built_in">enable</span></span><br></pre></td></tr></table></figure><ol start="2"><li>配置你的项目</li></ol><p>非常简单，只需要在项目的 <code>package.json</code> 中配置 <code>packageManager</code> 字段即可：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="comment">// npm</span></span><br><span class="line">  <span class="attr">&quot;packageManager&quot;</span><span class="punctuation">:</span> <span class="string">&quot;npm@10.8.1&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="comment">// pnpm</span></span><br><span class="line">  <span class="attr">&quot;packageManager&quot;</span><span class="punctuation">:</span> <span class="string">&quot;pnpm@9.1.4&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="comment">// yarn</span></span><br><span class="line">  <span class="attr">&quot;packageManager&quot;</span><span class="punctuation">:</span> <span class="string">&quot;yarn@3.1.1&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>⚠️ 提示：你必须指定明确的包管理器版本号，而不能指定一个范围。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="comment">// 不能使用一个范围</span></span><br><span class="line">  <span class="attr">&quot;packageManager&quot;</span><span class="punctuation">:</span> <span class="string">&quot;npm@^10.8.1&quot;</span><span class="punctuation">,</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 不能指定为 &quot;latest&quot;</span></span><br><span class="line">  <span class="attr">&quot;packageManager&quot;</span><span class="punctuation">:</span> <span class="string">&quot;pnpm@latest&quot;</span><span class="punctuation">,</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 不能不提供版本号</span></span><br><span class="line">  <span class="attr">&quot;packageManager&quot;</span><span class="punctuation">:</span> <span class="string">&quot;yarn&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="尝试一下吧"><a href="#尝试一下吧" class="headerlink" title="尝试一下吧"></a>尝试一下吧</h2><p>如果你在 <code>package.json</code> 内将 <code>packageManager</code> 配置为 <strong>pnpm</strong> ，执行 <code>pnpm install</code> 会提示：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Corepack is about to download https://registry.npmjs.org/pnpm/-/pnpm-9.1.4.tgz.</span><br><span class="line"></span><br><span class="line">Do you want to <span class="built_in">continue</span>? [Y/n]</span><br></pre></td></tr></table></figure><p>选择 <code>Y</code> 就会下载并使用指定版本的 pnpm。</p><h2 id="我们需要吗？"><a href="#我们需要吗？" class="headerlink" title="我们需要吗？"></a>我们需要吗？</h2><p>我觉得在自动化部署（CI&#x2F;CD）中非常值得尝试，可以便利快捷地使用指定的包管理器。因为当下包管理器也是百花齐放的状态， <code>npm</code> , <code>yarn</code> , <code>pnpm</code> , <code>bun</code> 都比较完善且各有特点，更多是由于开发者的个人喜好而选择，但是在自动化部署中还需要额外执行安装指令，略显繁琐。Corepack 能解决这一小小的痛点可以尝试下。</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;什么是-Corepack&quot;&gt;&lt;a href=&quot;#什么是-Corepack&quot; class=&quot;headerlink&quot; title=&quot;什么是 Corepack&quot;&gt;&lt;/a&gt;什么是 Corepack&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;https://img.vatery.com/file/7e5b3a5699af7a718ac0a.png&quot; alt=&quot;corepack&quot;&gt;&lt;br&gt;Corepack 是一个将 Node.js 与“包管理器”绑定在一起的工具，能够更容易的指定使用的“包管理器”版本。 (&lt;em&gt;Corepack 已经从 Node.js 14.19 版本开始默认携带发布&lt;/em&gt;)&lt;/p&gt;
&lt;p&gt;那么我们需要使用 Corepack 吗？&lt;/p&gt;</summary>
    
    
    
    
    <category term="nodejs" scheme="https://www.vatery.com/tags/nodejs/"/>
    
  </entry>
  
  <entry>
    <title>react 19 全新特性前瞻</title>
    <link href="https://www.vatery.com/2024/04/07/react-19/"/>
    <id>https://www.vatery.com/2024/04/07/react-19/</id>
    <published>2024-04-07T05:12:11.000Z</published>
    <updated>2024-06-08T10:16:37.702Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://img.vatery.com/file/9ca768cc146982be5c5be.png" alt="img"></p><p>近期 React 团队发布了最新的技术博客。兴奋地公布了他们已经准备好推出全新的 React Compiler。</p><span id="more"></span><h2 id="React-Compiler"><a href="#React-Compiler" class="headerlink" title="React Compiler"></a>React Compiler</h2><p>React Compiler 很好的解决了 React 项目的性能优化问题。以前我们写一些优化性的代码，必须引入 <code>useMemo</code> , <code>useCallback</code> , <code>memo</code> 来根据依赖项的改变，缓存已经计算过的数据。这给开发者的代码不仅增加了复杂度，而且开发者的心智负担也有明显增加。</p><p>React 团队了解这个问题，当时使用 <code>useMemo</code> 等方式也是一个妥协的解决方案，随着社区的呼吁声，React 团队着重解决了这个问题，研发 React Compiler 让框架能够自动判断是否需要优化并缓存，而开发者无须关注细节。</p><p>React 团队发布一项重大的、破坏性的功能之前，都会提前将新技术应用到生产环境中，保证其可行性。这点非常令普通开发者安心。本次 React Compiler 已经在 Instagram 线上使用。</p><p>博客地址：</p><p><a href="https://react.dev/blog/2024/02/15/react-labs-what-we-have-been-working-on-february-2024">React Labs: What We’ve Been Working On – February 2024 – React</a></p><h2 id="New-React-Hooks"><a href="#New-React-Hooks" class="headerlink" title="New React Hooks"></a>New React Hooks</h2><h3 id="useMemo-useCallback-memo"><a href="#useMemo-useCallback-memo" class="headerlink" title="useMemo, useCallback, memo"></a>useMemo, useCallback, memo</h3><p>不再需要了！因为 React Compiler 已经可以自动判断并优化。</p><h3 id="ref"><a href="#ref" class="headerlink" title="ref"></a>ref</h3><p>ref 可以当作一个 常规的 prop 通过 props 直接传输，而不需要 <code>forwardRef</code> 包裹。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">Button</span> = (<span class="params">&#123; ref, children &#125;</span>) =&gt; &#123;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">ref</span>=<span class="string">&#123;ref&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    &#123;children&#125;</span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="useContext"><a href="#useContext" class="headerlink" title="useContext"></a>useContext</h3><p>新的 <code>use(Context</code> hook 将会替代 <code>useContext</code> 。</p><h3 id=""><a href="#" class="headerlink" title="&lt;Context.Provider&gt;"></a>&lt;Context.Provider&gt;</h3><p><code>Context</code> 将会替代 <code>&lt;Context.Provider&gt;</code> 。</p><h3 id="Promise-请求"><a href="#Promise-请求" class="headerlink" title="Promise 请求"></a>Promise 请求</h3><p>新的 <code>use(promise)</code> 将可以直接管理 promise 函数的处理。</p><h2 id="Server-components"><a href="#Server-components" class="headerlink" title="Server components"></a>Server components</h2><p>React 19 开始全面支持“服务端渲染”。</p><p>带来一系列的高级特性：</p><ul><li>SEO: 搜索引擎友好</li><li>启动速度：减少初始化渲染时间</li><li>服务端执行：可以在服务端执行一些API请求，提高执行效率。</li></ul><p>React 的组件默认是客户端侧的，当使用 <code>&#39;use server&#39;</code> 时才会作为服务端侧的组件。</p><h2 id="Actions"><a href="#Actions" class="headerlink" title="Actions"></a>Actions</h2><p>主要针对 form 的增强，同时兼顾客户端侧&#x2F;服务端侧的逻辑处理。</p><p>例如：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 19之前的版本</span></span><br><span class="line">&lt;form onSubmit=&#123;search&#125;&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;query&quot;</span> /&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span>Search<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">&lt;/form&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 19版本</span></span><br><span class="line"><span class="string">&quot;use server&quot;</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">submitData</span> = <span class="keyword">async</span> (<span class="params">userData</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> newUser = &#123;</span><br><span class="line">  <span class="attr">username</span>: userData.<span class="title function_">get</span>(<span class="string">&#x27;username&#x27;</span>),</span><br><span class="line">  <span class="attr">email</span>: userData.<span class="title function_">get</span>(<span class="string">&#x27;email&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(newUser)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;form action=<span class="string">&quot;submitData&quot;</span>&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>/&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;email&quot;</span> /&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span>Submit<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure><h2 id="Web-Components"><a href="#Web-Components" class="headerlink" title="Web Components"></a>Web Components</h2><p>“Web Components” 允许通过原生的 HTML, CSS, JavaScript 创建自定义的组件，目前该技术已经有一定的成熟性。</p><p>之前 React 是无法直接与 Web Components 直接进行结合的。但在 19 之后这会变得非常容易且优雅。</p><h2 id="Document-Metadata"><a href="#Document-Metadata" class="headerlink" title="Document Metadata"></a>Document Metadata</h2><p>在 HTML 中大家通常忽略了 “title”, “meta tags”, “description” 等元素。然而这些元素对搜索引擎的 SEO 有重大影响。</p><p>以前的 React 对这部分的控制很少，尤其是在路由跳转之后，变更上述的一些状态是很常见的。目前开发者通常会直接操作 Document 元素，或者使用一些第三方的包（如：react-helmet）来操作 meta 数据。</p><p>之后的操作方式：</p><p>可以在 React 中直接使用 <code>title</code> , <code>meta</code> 标签</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">HomePage</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">title</span>&gt;</span>foo<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;description&quot;</span> <span class="attr">content</span>=<span class="string">&quot;bar&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Asset-Loading"><a href="#Asset-Loading" class="headerlink" title="Asset Loading"></a>Asset Loading</h2><p>React 或者说前端 UI 库中，资源加载一直是一个比较影响用户体验的点。19 版本优化了 stylesheets, fonts, scripts 的加载速度和展示上的体验。</p><p>另外提供了 <code>preload</code> 和 <code>preinit</code> 更好地控制资源的加载。</p><h2 id="React-Canary"><a href="#React-Canary" class="headerlink" title="React Canary"></a>React Canary</h2><p>“金丝雀”发布是 React 项目尝试的一种全新的开发流程。</p><p>以前新的特性只在 Meta 内部进行研究与开发，最后大众开发者会见到一个改变巨大的稳定版本。在实行金丝雀研发模式后，React 的开发会转变为公开。通过 React Labs 博客系列不停同步新的特性，然后收集来自社区的反馈。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://img.vatery.com/file/9ca768cc146982be5c5be.png&quot; alt=&quot;img&quot;&gt;&lt;/p&gt;
&lt;p&gt;近期 React 团队发布了最新的技术博客。兴奋地公布了他们已经准备好推出全新的 React Compiler。&lt;/p&gt;</summary>
    
    
    
    
    <category term="React" scheme="https://www.vatery.com/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>2023年度macOS优秀App推荐</title>
    <link href="https://www.vatery.com/2024/02/23/2023-macos-great-apps/"/>
    <id>https://www.vatery.com/2024/02/23/2023-macos-great-apps/</id>
    <published>2024-02-23T14:31:12.000Z</published>
    <updated>2024-06-08T10:16:37.702Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://cdn.sa.net/2024/02/23/RETy4nDYdP7lqBX.png" alt="conver"><br>2023年我替换了不少已经熟悉的App，不乏有提高生产力的工具，也有提升娱乐的软件。<br>现在的App创意已然没有前些年的爆发力，但是交互体验和界面美观度确确实实有进步。<br>下面一起来看看我在2023年给你推荐的优秀App。</p><span id="more"></span><h2 id="Raycast"><a href="#Raycast" class="headerlink" title="Raycast"></a>Raycast</h2><blockquote><p>不止于应用启动器 免费✅ &#x2F; 付费💰</p></blockquote><p><a href="https://www.raycast.com/">https://www.raycast.com/</a></p><p><img src="https://cdn.sa.net/2024/02/23/IRmTu5S6tP9HLMw.png" alt="raycast"></p><p>当之无愧第一名！</p><p>作为尊贵的Alfred全款Mega永久授权用户，背叛并逃离到Raycast。接着就是真香。</p><ul><li>现代美观的UI</li><li>非常丰富的插件市场</li><li>免费（个人用户）</li><li>开发者友好（支持React编写UI）</li></ul><p>把Alfred和Raycast对比，如果说UI的重要性没有那么高，免费可能是第一要素。虽然说Alfred也有免费的功能，但是相对于Raycast免费默认全给的状态，实在是相形见绌。</p><p>我由于本来就是Alfred的付费用户，我更看重的则是插件市场。Alfred官方没有较好的运营插件市场。即使有很开放的API，以及Python、Shell、PHP等各类的语言的支持，但是整体的生态还是要有用户来建设的。但是非常多优秀的插件没有得到足够的推广，使得开发者积极性大大降低，我自用的许多插件都已经进入了停止维护阶段。想要寻找替代的插件，但是寥寥可数。</p><p>个人推荐的插件：</p><ul><li>Bitwarden Vault # 搜索密码</li><li>Douban # 搜索电影、图书</li><li>Easy Dictionary # 聚合翻译</li><li>Clipboard History # 剪贴板记录</li><li>Floating Notes # 便捷记事贴</li><li>Kill Process # 杀死进程</li><li>Quit Applications # 退出程序</li><li>Lorem Lpsum # 生成随机填充字符</li><li>Music # Apple Music 添加喜爱、下一首</li><li>Spotify Controls # Spotify 播放、暂停、下一首</li><li>Notion # 快速搜索、创建 Page</li><li>Search RegExp # 搜索常用正则表达式</li><li>Search npm Packages # 搜索npm包</li><li>Tailwind CSS # 一步查找用法、颜色</li><li>Timers # 快速开启一个定时器</li><li>Year in Progress # 看看你今年的进度</li><li><a href="http://ray.so/">ray.so</a> # 创建美观的代码截图</li></ul><h2 id="Arc-Browser"><a href="#Arc-Browser" class="headerlink" title="Arc Browser"></a>Arc Browser</h2><blockquote><p>次世代浏览器 免费✅</p></blockquote><p><a href="https://arc.net/">https://arc.net/</a></p><p><img src="https://cdn.sa.net/2024/02/23/r97IYAXlmTqZPJt.png" alt="arc"><br>在我体验过垂直标签后，真的回不去了。</p><p>虽然Edge也有垂直标签功能，但总是缺点什么，易用性。例如要钉住一个网页，图标非常小，有时候很难看清icon代表的什么网站。</p><p>Edge有标签页，有集锦，有书签，分开的体验非常割裂。而Arc则都放在了左侧边栏。动画、触控板手势温润优雅。</p><p>加上工作空间能够调制任意的色彩，真的体验飞升。</p><h2 id="Poe"><a href="#Poe" class="headerlink" title="Poe"></a>Poe</h2><blockquote><p>AI的集合站 免费✅ &#x2F; 付费💰</p></blockquote><p><a href="https://poe.com/">https://poe.com</a></p><p><img src="https://cdn.sa.net/2024/02/23/8KdZ1rFAYDV3PO4.png" alt="poe"></p><p>2023真的是AI爆发的元年，如果你还不知道AI，那肯定是落伍了。</p><p>市面上AI模型百花齐放，但是最数易用及好用的，则是OpenAI的模型。在poe中ChatGPT 3.5是完全免费的。另外接入了其他各大模型，随意切换。ChatGPT 的答案不满意，再问问 Claude 比对下，或者和 Google 的 Gemini 随意聊聊。</p><h2 id="Wins"><a href="#Wins" class="headerlink" title="Wins"></a>Wins</h2><blockquote><p>窗口管理 付费💰</p></blockquote><p><a href="https://wins.cool/">https://wins.cool/</a></p><p><img src="https://cdn.sa.net/2024/02/23/Il3qALxTeJz4yCr.png" alt="wins"></p><p>直观的操作，我看灵感应该是完全来自于Windows🤣，甚至名字都有影子。</p><h2 id="VidHub"><a href="#VidHub" class="headerlink" title="VidHub"></a>VidHub</h2><blockquote><p>新时代网盘影音播放器 免费✅</p></blockquote><p><a href="https://zh.okaapps.com/product/1659622164">https://zh.okaapps.com/product/1659622164</a></p><p><img src="https://cdn.sa.net/2024/02/23/amqwtLHQEj8e5lM.png" alt="vidhub"></p><p>这也是一款顺利令我从Infuse付费用户转向的App，且毫不犹豫。</p><p>国人开发，对接的资源库丰富，更新频繁，阿里云盘扫描贼快。</p><p>不是说Infuse不好，只是以前没有对手。现在对手来了，就是VidHub。虽然说VidHub缺少杜比视界等高端功能，但是在路上了。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://cdn.sa.net/2024/02/23/RETy4nDYdP7lqBX.png&quot; alt=&quot;conver&quot;&gt;&lt;br&gt;2023年我替换了不少已经熟悉的App，不乏有提高生产力的工具，也有提升娱乐的软件。&lt;br&gt;现在的App创意已然没有前些年的爆发力，但是交互体验和界面美观度确确实实有进步。&lt;br&gt;下面一起来看看我在2023年给你推荐的优秀App。&lt;/p&gt;</summary>
    
    
    
    
    <category term="macOS" scheme="https://www.vatery.com/tags/macOS/"/>
    
    <category term="App" scheme="https://www.vatery.com/tags/App/"/>
    
  </entry>
  
  <entry>
    <title>2024年度计划</title>
    <link href="https://www.vatery.com/2023/12/24/annual-plan-for-2024/"/>
    <id>https://www.vatery.com/2023/12/24/annual-plan-for-2024/</id>
    <published>2023-12-24T15:42:28.000Z</published>
    <updated>2024-06-08T10:16:37.702Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://images.unsplash.com/photo-1501504905252-473c47e087f8?ixid=M3w1NDQ0ODJ8MHwxfHNlYXJjaHw5fHxuZXclMjB5ZWFyfGVufDB8MHx8fDE3MDQwMDU4NjJ8MA&ixlib=rb-4.0.3" alt="image"><br>新的一年计划，必然更进一步。</p><span id="more"></span><h2 id="阅读"><a href="#阅读" class="headerlink" title="阅读"></a>阅读</h2><h3 id="小说"><a href="#小说" class="headerlink" title="小说"></a>小说</h3><ul><li><input disabled="" type="checkbox"> 沙丘 六部曲</li><li><input disabled="" type="checkbox"> 长安的荔枝</li><li><input disabled="" type="checkbox"> 人生海海</li><li><input disabled="" type="checkbox"> 银河系漫游指南</li></ul><h3 id="财经"><a href="#财经" class="headerlink" title="财经"></a>财经</h3><ul><li><input disabled="" type="checkbox"> 杰西利弗摩尔的 大作手回忆录</li><li><input disabled="" type="checkbox"> 日本蜡烛图技术</li><li><input disabled="" type="checkbox"> 新威科夫操盘法</li><li><input disabled="" type="checkbox"> 笑傲股市</li></ul><h3 id="社科"><a href="#社科" class="headerlink" title="社科"></a>社科</h3><ul><li><input disabled="" type="checkbox"> 沸腾十五年：中国互联网1995—2009</li><li><input disabled="" type="checkbox"> 影响力</li><li><input disabled="" type="checkbox"> 枪炮、病菌与钢铁</li></ul><h3 id="家庭教育"><a href="#家庭教育" class="headerlink" title="家庭教育"></a>家庭教育</h3><ul><li><input disabled="" type="checkbox"> 真希望我父母度过这本书</li></ul><h3 id="传记"><a href="#传记" class="headerlink" title="传记"></a>传记</h3><ul><li><input disabled="" type="checkbox"> 穷查理宝典</li><li><input disabled="" type="checkbox"> 原则</li></ul><h2 id="英语"><a href="#英语" class="headerlink" title="英语"></a>英语</h2><ul><li><input disabled="" type="checkbox"> 学习新概念英语2-3册</li></ul><h2 id="健身"><a href="#健身" class="headerlink" title="健身"></a>健身</h2><ul><li><input disabled="" type="checkbox"> 骑行上下班</li><li><input disabled="" type="checkbox"> 引体向上10个</li><li><input disabled="" type="checkbox"> 俯卧撑20个</li></ul><h2 id="娱乐"><a href="#娱乐" class="headerlink" title="娱乐"></a>娱乐</h2><h3 id="电影电视"><a href="#电影电视" class="headerlink" title="电影电视"></a>电影电视</h3><ul><li><input disabled="" type="checkbox"> 沙丘</li><li><input checked="" disabled="" type="checkbox"> 伯德小姐</li><li><input disabled="" type="checkbox"> 三峡好人</li></ul><p>持续更新中…</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://images.unsplash.com/photo-1501504905252-473c47e087f8?ixid=M3w1NDQ0ODJ8MHwxfHNlYXJjaHw5fHxuZXclMjB5ZWFyfGVufDB8MHx8fDE3MDQwMDU4NjJ8MA&amp;ixlib=rb-4.0.3&quot; alt=&quot;image&quot;&gt;&lt;br&gt;新的一年计划，必然更进一步。&lt;/p&gt;</summary>
    
    
    
    
    <category term="plan" scheme="https://www.vatery.com/tags/plan/"/>
    
    <category term="2024" scheme="https://www.vatery.com/tags/2024/"/>
    
  </entry>
  
  <entry>
    <title>2023年度总结</title>
    <link href="https://www.vatery.com/2023/12/23/2023%E5%B9%B4%E5%BA%A6%E6%80%BB%E7%BB%93/"/>
    <id>https://www.vatery.com/2023/12/23/2023%E5%B9%B4%E5%BA%A6%E6%80%BB%E7%BB%93/</id>
    <published>2023-12-23T15:59:32.000Z</published>
    <updated>2024-06-08T10:16:37.702Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://images.unsplash.com/photo-1518082049942-62a4e31b18d3?ixid=M3w1NDQ0ODJ8MHwxfHNlYXJjaHwxfHxhbm51YWwlMjBwbGFufGVufDB8MHx8fDE3MDMzNTA0MDF8MA&ixlib=rb-4.0.3"></p><p>临近2023年末，和以往有些不一样。</p><p>可能是自己有史以来提升最多的一年，所以值得好好纪念。<br>之前分别定了健身、阅读、英语和计算机技术方面的几个目标，目前回顾基本可以算达到了80%。🎉</p><span id="more"></span><p>说来惭愧，以往都没有过明确的计划，每年得过，最终一事无成。<br>在2023年初时，对自己定下了一些目标，每天给自己的todo list中添加任务。没想到贵在坚持，居然完成了不少最初的计划。在此要简单地感谢下things3，😄能鞭策我去清空一个个task。</p><h2 id="计划盘点"><a href="#计划盘点" class="headerlink" title="计划盘点"></a>计划盘点</h2><p>下面简单盘点下计划完成情况：</p><p>在2023年初的计划中，大概分了4大类。分别是工作技能、锻炼、英语、阅读及写作。接下来也是按照这几个方面开始。</p><h3 id="工作技能"><a href="#工作技能" class="headerlink" title="工作技能"></a>工作技能</h3><p>✅ Swift<br>⚠️ <del>Rust</del><br>⚠️ <del>Python</del></p><p>起初学习Swift是通过斯坦福的cs课程，但是学到一半觉得太枯燥而放弃。最后还是通过制作项目快速上手，边做边查边学才上手的。但是目前发现SwiftUI的学习难度着实不低。或许也是iOS开发的难度不低吧。要制作优美设计、动感交互的需要非常多的奇技淫巧，而网络上的教程大多是比较简单的入门，仅仅做了一些API的Demo。</p><p>而Rust与Python没过多久就决心放弃深入学习。Rust是一个高级的系统级编程语言，总感觉它很Cool，但冷静下来后发现我目前的技术栈是不需要Rust的。而且Rust的学习曲线非常陡峭，如果后边没有经过大量编写用例而运用的话，很容易手生。Python类似，本身是一种脚本语言，在Linux上用来执行一些任务时可以快速编写。但是没必要特别去学，而是需要用到时再查询吧。</p><h3 id="锻炼"><a href="#锻炼" class="headerlink" title="锻炼"></a>锻炼</h3><p>✅ 15个俯卧撑</p><p>这是读过《微习惯》一书后兴起的念头。慢慢地从刚开始1个增加练习到15个。第一次完成15个时，高兴了很久，没想到自己能做到。</p><h3 id="英语"><a href="#英语" class="headerlink" title="英语"></a>英语</h3><p>✅ 赖世雄美语音标<br>✅ 多邻国 250天连胜<br>❌ 旋元佑文法</p><p>英语一直是心中的执念。可是每每想要用心学习而有所成效时，总是打退堂鼓。这次也是一样，给自己定了一个稍稍轻松的任务，但最后也仅仅完成了一个音标的重新学习。<br>或许2024年能有更好的表现？</p><h3 id="阅读及写作"><a href="#阅读及写作" class="headerlink" title="阅读及写作"></a>阅读及写作</h3><p>一共看完了 <strong>14</strong> 本书，其实不止，沙丘6部曲中的前2部就没算进去，准备将整套一道读完放入2024年。</p><h4 id="传记"><a href="#传记" class="headerlink" title="传记"></a>传记</h4><p>✅ 乔布斯传<br>✅ 硅谷钢铁侠：埃隆马斯克的冒险人生</p><h4 id="虚构小说"><a href="#虚构小说" class="headerlink" title="虚构小说"></a>虚构小说</h4><p>✅ 绿毛水怪<br>✅ 美丽新世界<br>✅ 大樟树下烹鲤鱼</p><h4 id="社会"><a href="#社会" class="headerlink" title="社会"></a>社会</h4><p>✅ 蛤蟆先生去看心理医生<br>✅ 别独自用餐<br>✅ 激荡四十年：中国企业1978-2018</p><h4 id="工作及方法论"><a href="#工作及方法论" class="headerlink" title="工作及方法论"></a>工作及方法论</h4><p>✅ 微习惯<br>✅ 做对产品<br>✅ 卡片笔记写作法<br>❌ Unix编程艺术</p><h4 id="创业"><a href="#创业" class="headerlink" title="创业"></a>创业</h4><p>✅ 如何开一家小而美的店</p><h4 id="金融"><a href="#金融" class="headerlink" title="金融"></a>金融</h4><p>❌ 笑傲股市<br>✅ 彼得林奇的成功投资<br>✅ 长期投资<br>⚠️ <del>手把手教你读财报</del> (实在枯燥无趣)</p><h4 id="写作20篇blog"><a href="#写作20篇blog" class="headerlink" title="写作20篇blog"></a>写作20篇blog</h4><p>⚠️ 9篇 <a href="/archives">列表</a></p><p>实在高估自己了，哈哈，内容的输入远比自己想象的难。自己远比想象的懒。🥲</p><h3 id="工作"><a href="#工作" class="headerlink" title="工作"></a>工作</h3><p>尤其让我惊喜的是，在年末12月的时候，能够有机会进入新的一家公司。各方面都还挺满意。</p><h2 id="2024年展望"><a href="#2024年展望" class="headerlink" title="2024年展望"></a>2024年展望</h2><p>肯定有一篇新的计划，那会有详细的内容。这里简单透露下，对自己更高要求吧。</p><p>与君共勉！</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://images.unsplash.com/photo-1518082049942-62a4e31b18d3?ixid=M3w1NDQ0ODJ8MHwxfHNlYXJjaHwxfHxhbm51YWwlMjBwbGFufGVufDB8MHx8fDE3MDMzNTA0MDF8MA&amp;ixlib=rb-4.0.3&quot;&gt;&lt;/p&gt;
&lt;p&gt;临近2023年末，和以往有些不一样。&lt;/p&gt;
&lt;p&gt;可能是自己有史以来提升最多的一年，所以值得好好纪念。&lt;br&gt;之前分别定了健身、阅读、英语和计算机技术方面的几个目标，目前回顾基本可以算达到了80%。🎉&lt;/p&gt;</summary>
    
    
    
    
    <category term="2023" scheme="https://www.vatery.com/tags/2023/"/>
    
    <category term="plan" scheme="https://www.vatery.com/tags/plan/"/>
    
  </entry>
  
  <entry>
    <title>简单理解Nvim的cmp与lsp</title>
    <link href="https://www.vatery.com/2023/09/02/%E7%AE%80%E5%8D%95%E7%90%86%E8%A7%A3Nvim%E7%9A%84cmp%E4%B8%8Elsp/"/>
    <id>https://www.vatery.com/2023/09/02/%E7%AE%80%E5%8D%95%E7%90%86%E8%A7%A3Nvim%E7%9A%84cmp%E4%B8%8Elsp/</id>
    <published>2023-09-02T15:51:10.000Z</published>
    <updated>2024-06-08T10:16:37.702Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://vip2.loli.io/2023/09/02/6KaLAEdq4ezHr85.png"></p><p>有3个关键要素：</p><ul><li>LSP 管理器: <code>nvim-lspconfig</code></li><li>cmp 代码补全引擎插件:  <code>nvim-cmp</code></li><li>language server 管理器:  <code>mason.nvim</code></li></ul><span id="more"></span><h2 id="LSP是什么"><a href="#LSP是什么" class="headerlink" title="LSP是什么"></a>LSP是什么</h2><p>Language Server Protocol，实际意义为客户端与服务端通信协议。感谢微软的创造。</p><p>而language server是专门为单独语言启动的解析、处理服务，具体能够实现例如：</p><ul><li>跳转定义</li><li>找到引用</li><li>完成提示</li><li>重命名</li><li>格式化</li><li>重构</li></ul><p>等等操作，非常贴近于IDE的功能。</p><p>Nvim内置了<a href="https://neovim.io/doc/user/lsp.html">Nvim LSP Client</a>的API接口，但是服务端的实际分析处理能力需要第三方提供。</p><p>原本的配置比较复杂繁琐，官方又制作 <code>nvim-lspconfig</code> 来管理各类第三方language server的配置。</p><h2 id="CMP是什么"><a href="#CMP是什么" class="headerlink" title="CMP是什么"></a>CMP是什么</h2><p>全称是 <code>autocompeletion</code>翻译为自动补全比较合适。</p><p>最核心的功能是提供代码片段。</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&#x27;hrsh7th/nvim-cmp&#x27;</span>,</span><br><span class="line">    event = <span class="string">&quot;VeryLazy&quot;</span>,</span><br><span class="line">    <span class="built_in">config</span> = <span class="function"><span class="keyword">function</span><span class="params">()</span></span></span><br><span class="line">      <span class="keyword">local</span> cmp = <span class="built_in">require</span>(<span class="string">&quot;cmp&quot;</span>)</span><br><span class="line">      cmp.setup(&#123;</span><br><span class="line">        snippet = &#123; expand = <span class="function"><span class="keyword">function</span><span class="params">()</span></span> <span class="keyword">end</span> &#125;,</span><br><span class="line">        sources = cmp.<span class="built_in">config</span>.sources(&#123;</span><br><span class="line">          &#123; name = <span class="string">&quot;nvim_lsp&quot;</span> &#125;,</span><br><span class="line">          &#123; name = <span class="string">&quot;nvim_lua&quot;</span> &#125;,</span><br><span class="line">          &#123; name = <span class="string">&quot;buffer&quot;</span> &#125;,</span><br><span class="line">          &#123; name = <span class="string">&quot;path&quot;</span> &#125;,</span><br><span class="line">        &#125;),</span><br><span class="line">      &#125;)</span><br><span class="line">    <span class="keyword">end</span>,</span><br><span class="line">    dependencies = &#123;</span><br><span class="line">      <span class="string">&quot;hrsh7th/cmp-nvim-lsp&quot;</span>,</span><br><span class="line">      <span class="string">&quot;hrsh7th/cmp-nvim-lua&quot;</span>,</span><br><span class="line">      <span class="string">&quot;hrsh7th/cmp-buffer&quot;</span>,</span><br><span class="line">      <span class="string">&quot;hrsh7th/cmp-path&quot;</span>,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>其中sources则是代码片段的插件。</p><h2 id="Mason-nvim怎么用"><a href="#Mason-nvim怎么用" class="headerlink" title="Mason.nvim怎么用"></a>Mason.nvim怎么用</h2><p>如果你是用的了 <code>nvim-lspconfig</code> 管理lsp，那么配合mason需要一个中间桥梁 <code>mason-lspconfig</code>。</p><p>使用 <code>:Mason</code> 就能选择你所需要的 language server 进行安装。</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="string">&quot;neovim/nvim-lspconfig&quot;</span>,</span><br><span class="line"><span class="built_in">config</span> = <span class="function"><span class="keyword">function</span><span class="params">()</span></span></span><br><span class="line">  <span class="keyword">local</span> lspconfig = <span class="built_in">require</span>(<span class="string">&#x27;lspconfig&#x27;</span>)</span><br><span class="line">  lspconfig.lua_ls.setup &#123;&#125;</span><br><span class="line">  lspconfig.tsserver.setup &#123;&#125;</span><br><span class="line">  lspconfig.tailwindcss.setup &#123;&#125;</span><br><span class="line">  lspconfig.marksman.setup &#123;&#125;</span><br><span class="line">  lspconfig.eslint.setup &#123;&#125;</span><br><span class="line">  lspconfig.html.setup &#123;&#125;</span><br><span class="line">  lspconfig.cssls.setup &#123;&#125;</span><br><span class="line"><span class="keyword">end</span>,</span><br><span class="line">dependencies = &#123;</span><br><span class="line">  <span class="string">&quot;williamboman/mason-lspconfig.nvim&quot;</span>,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line"><span class="string">&quot;williamboman/mason.nvim&quot;</span>,</span><br><span class="line"><span class="built_in">config</span> = <span class="literal">true</span></span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line"><span class="string">&quot;williamboman/mason-lspconfig.nvim&quot;</span>,</span><br><span class="line">opts = &#123;</span><br><span class="line">  ensure_installed = &#123;</span><br><span class="line">    <span class="string">&quot;lua_ls&quot;</span>,</span><br><span class="line">    <span class="string">&quot;tsserver&quot;</span>,</span><br><span class="line">    <span class="string">&quot;cssls&quot;</span>,</span><br><span class="line">    <span class="string">&quot;tailwindcss&quot;</span>,</span><br><span class="line">    <span class="string">&quot;marksman&quot;</span>,</span><br><span class="line">    <span class="string">&quot;html&quot;</span>,</span><br><span class="line">    <span class="string">&quot;eslint&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br><span class="line">dependencies = &#123;</span><br><span class="line">  <span class="string">&quot;williamboman/mason.nvim&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://vip2.loli.io/2023/09/02/6KaLAEdq4ezHr85.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;有3个关键要素：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;LSP 管理器: &lt;code&gt;nvim-lspconfig&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;cmp 代码补全引擎插件:  &lt;code&gt;nvim-cmp&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;language server 管理器:  &lt;code&gt;mason.nvim&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    
    <category term="nvim" scheme="https://www.vatery.com/tags/nvim/"/>
    
  </entry>
  
  <entry>
    <title>观看《奥本海默》</title>
    <link href="https://www.vatery.com/2023/08/31/%E8%A7%82%E7%9C%8B%E3%80%8A%E5%A5%A5%E6%9C%AC%E6%B5%B7%E9%BB%98%E3%80%8B/"/>
    <id>https://www.vatery.com/2023/08/31/%E8%A7%82%E7%9C%8B%E3%80%8A%E5%A5%A5%E6%9C%AC%E6%B5%B7%E9%BB%98%E3%80%8B/</id>
    <published>2023-08-31T01:20:42.000Z</published>
    <updated>2024-06-08T10:16:37.702Z</updated>
    
    <content type="html"><![CDATA[<p>不得不说，诺兰擅长的插叙、倒叙手法，在前期大大增加了理解难度。炸裂的音乐效果在部分节点烘托十分到位，可在后期越来越密集，把脑子惊吓得嗡嗡的。心理活动表现确实困难，大量对白及脸部特写可能会让观众觉得拖沓无聊。<br><img src="https://vip2.loli.io/2023/08/31/LFHPTDcgftXOdh5.jpg"></p><span id="more"></span><p>奥本海默起初出于爱国抗战目的参与研发原子弹项目，在战场上真实爆炸后数十万条性命丧生，让其反思自己所作所为。慢慢意识到原子弹对人类社会发展的反作用。从科学家的身份转变到注重人道主义的社会运动家。</p><p>这是一部关于奥本海默的传记片，是真实发生的。也让普通民众走近了上世纪40年代那群蓬勃灿烂的著名科学家：泰勒、爱因斯坦、玻尔等等。以及科学家被裹挟进军事和政治的挣扎。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;不得不说，诺兰擅长的插叙、倒叙手法，在前期大大增加了理解难度。炸裂的音乐效果在部分节点烘托十分到位，可在后期越来越密集，把脑子惊吓得嗡嗡的。心理活动表现确实困难，大量对白及脸部特写可能会让观众觉得拖沓无聊。&lt;br&gt;&lt;img src=&quot;https://vip2.loli.io/2023/08/31/LFHPTDcgftXOdh5.jpg&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="movie" scheme="https://www.vatery.com/tags/movie/"/>
    
  </entry>
  
  <entry>
    <title>从macOS到fedora+i3进而arch+hyprland</title>
    <link href="https://www.vatery.com/2023/05/15/%E4%BB%8EmacOS%E5%88%B0fedora-i3%E8%BF%9B%E8%80%8Carch-hyprland/"/>
    <id>https://www.vatery.com/2023/05/15/%E4%BB%8EmacOS%E5%88%B0fedora-i3%E8%BF%9B%E8%80%8Carch-hyprland/</id>
    <published>2023-05-15T17:48:22.000Z</published>
    <updated>2024-06-08T10:16:37.702Z</updated>
    
    <content type="html"><![CDATA[<p>由于在单个显示器上开发项目时，还是会遇到不停切换编辑器和浏览器的小痛点，可视空间使用率太低。在一次YouTube上观看大牛使用Linux时，被平铺桌面完完全全吸引住了。拍断大腿，相见恨晚的感觉。</p><p>从此入了Tiling Window Manager的坑。</p><span id="more"></span><h2 id="Fedora-i3"><a href="#Fedora-i3" class="headerlink" title="Fedora + i3"></a>Fedora + i3</h2><p>从开始体验Fedora Desktop开始，还是源于Linus最推崇的个人开发操作系统。上手体验后Gnome的桌面系统确实比较完善且稳定。而Fedora上包的丰富程度、版本新鲜度都是不错的。</p><p>自从知道了平铺桌面便跃跃欲试。在各类桌面管理器(Desktop Manager)中犯了选择困难症。</p><p>其中大部分桌面管理器已经再是在世多时，拥有丰富的功能。也有一些新秀，操作、交互、动效更酷！</p><p>例如：</p><ul><li>i3</li><li>bspwm</li><li>Sway</li><li>Xmonad</li><li>AwesomeWM</li><li>…</li></ul><p>由于之前完全没有使用平铺桌面的经验，所以只能选择一个用户社群较大，配置简单的先作为入手。这能让我少踩坑，遇到难题时能够快速搜索到解决路子。</p><p>所以我选取了i3。</p><h2 id="Arch-Hyprland"><a href="#Arch-Hyprland" class="headerlink" title="Arch + Hyprland"></a>Arch + Hyprland</h2><p>至于为什么我又要转到arch + Hyprland，实属是闲得蛋疼。推荐各位有正经、要紧工作做的，千万不要转到这个组合！</p><h3 id="我还是说说我选择arch的理由：软件包丰富"><a href="#我还是说说我选择arch的理由：软件包丰富" class="headerlink" title="我还是说说我选择arch的理由：软件包丰富"></a>我还是说说我选择arch的理由：软件包丰富</h3><p>确实只有这一点，因为Fedora同属为Linux，arch有的大部分优点，Fedora都具备。比如Linux的高度自由定制化、较新的软件包、支持各类平铺桌面。</p><p>可一方面的事实是，看各类GitHub上的软件安装说明时，arch和ubuntu&#x2F;debian的丰富程度是排第一梯队的；Fedora&#x2F;CentOS有时是不提供包管理器版本的安装。这让我非常羡慕arch安装包的方便省心。我从macOS上homebrew安装的奢华感受，难以回到编译安装、解决库版本冲突等问题的简陋糟糕体验。</p><h3 id="为什么我不推荐你用arch"><a href="#为什么我不推荐你用arch" class="headerlink" title="为什么我不推荐你用arch"></a>为什么我不推荐你用arch</h3><p>完全是<del>开箱即用</del>的<em>反状态</em>。</p><p>如果说Fedora装了i3之后什么都没配置的情况下，算是毛坯房。<br>arch+Hyprland就是给了你一个地基，连墙壁都要自己搭！</p><p>这里面分两方面：</p><ol><li>arch本身是一个光秃秃的系统</li><li>Hyprland基于Wayland不适用于部分应用</li></ol><p>arch且不说没中文输入法，这个还能理解，更多基本的功能都是需要自己安装软件的。例如中文字体、emoji字体、音频控制、蓝牙连接、文件管理器等等。连显示器长时间没有动作需要熄屏休眠都是没有的。缺失的软件开源的有很多，但是哪个好用并且哪个适配，需要自己一个个尝试。</p><p>等我自己搭配出一套易用的系统之后，我这才明白各种不同发行版存在的意义。</p><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><h4 id="性能"><a href="#性能" class="headerlink" title="性能"></a>性能</h4><ul><li>开机后内存占用只有800M左右。没有了很多自己用不到的服务之后，确实非常小巧。</li><li>CPU也是极低。</li></ul><h4 id="完全自定义"><a href="#完全自定义" class="headerlink" title="完全自定义"></a>完全自定义</h4><ul><li>所有快捷键都是符合自己使用习惯的，每一个都是自己定义，了熟于心。</li><li>所有应用都是自己挑选，拥有极大的选用范围。</li><li>界面的样式也是按照自己喜好来。</li></ul><h4 id="开源"><a href="#开源" class="headerlink" title="开源"></a>开源</h4><ul><li>快速更新，可以基于git的最新commit进行更新。</li><li>选择性多。</li><li>自由free地修改源码。</li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;由于在单个显示器上开发项目时，还是会遇到不停切换编辑器和浏览器的小痛点，可视空间使用率太低。在一次YouTube上观看大牛使用Linux时，被平铺桌面完完全全吸引住了。拍断大腿，相见恨晚的感觉。&lt;/p&gt;
&lt;p&gt;从此入了Tiling Window Manager的坑。&lt;/p&gt;</summary>
    
    
    
    
    <category term="linux" scheme="https://www.vatery.com/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>读《蛤蟆先生去看心理医生》</title>
    <link href="https://www.vatery.com/2023/03/28/%E8%AF%BB%E3%80%8A%E8%9B%A4%E8%9F%86%E5%85%88%E7%94%9F%E5%8E%BB%E7%9C%8B%E5%BF%83%E7%90%86%E5%8C%BB%E7%94%9F%E3%80%8B/"/>
    <id>https://www.vatery.com/2023/03/28/%E8%AF%BB%E3%80%8A%E8%9B%A4%E8%9F%86%E5%85%88%E7%94%9F%E5%8E%BB%E7%9C%8B%E5%BF%83%E7%90%86%E5%8C%BB%E7%94%9F%E3%80%8B/</id>
    <published>2023-03-28T01:27:37.000Z</published>
    <updated>2024-06-08T10:16:37.702Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://img.vatery.com/file/8d689b9ec9d41aad21d22.png" alt="cover"></p><p>初看以为是给儿童的读物，文字轻松、角色都是可爱的动物，整体也不长。</p><p>仔细读下去，才慢慢发现这是一部帮助你剖析心理、逐渐认识自我的书。</p><span id="more"></span><p>每个人或多或少都有一些心理问题。蛤蟆先生这个可怜的家伙在遭遇巨大不幸时，微小的情绪波动被无限放大，进而占据整个心房。蛤蟆先生一蹶不振，困在阴影里走不出来。不是不想走出来，而是感到无力，越陷越深，放弃挣扎。</p><p>在拜访心理医生苍鹭的交谈中，蛤蟆先生对我就如同一面镜子。他在诉说，我也在回忆。刚开始是痛苦的。但是随着不断深入，像刮骨疗伤般。蛤蟆先生看到来自家庭父母的重大影响、缺乏自信的自我否定，这些造就了现在的他。</p><p>苍鹭说：要走出来，只有靠自己。伴随着前因后果层层剥开，蛤蟆先生也逐渐接受不完美的自己，撩开布满糟糕情绪的迷雾，看到了被自己藏匿起来内心的根本问题。</p><p>最终他找到了答案。他对生活又充满期待。他学会了怎么控制自己，对待家人朋友，对待整个世界。</p><p>像一个真正的成年人。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://img.vatery.com/file/8d689b9ec9d41aad21d22.png&quot; alt=&quot;cover&quot;&gt;&lt;/p&gt;
&lt;p&gt;初看以为是给儿童的读物，文字轻松、角色都是可爱的动物，整体也不长。&lt;/p&gt;
&lt;p&gt;仔细读下去，才慢慢发现这是一部帮助你剖析心理、逐渐认识自我的书。&lt;/p&gt;</summary>
    
    
    
    
    <category term="book" scheme="https://www.vatery.com/tags/book/"/>
    
  </entry>
  
  <entry>
    <title>读《乔布斯》有感</title>
    <link href="https://www.vatery.com/2023/03/03/%E8%AF%BB%E3%80%8A%E4%B9%94%E5%B8%83%E6%96%AF%E3%80%8B%E6%9C%89%E6%84%9F/"/>
    <id>https://www.vatery.com/2023/03/03/%E8%AF%BB%E3%80%8A%E4%B9%94%E5%B8%83%E6%96%AF%E3%80%8B%E6%9C%89%E6%84%9F/</id>
    <published>2023-03-03T14:41:14.000Z</published>
    <updated>2024-06-08T10:16:37.702Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://vip2.loli.io/2023/03/19/Hbtdm56zCeEaSIK.jpg" alt="steve jobs"><br>如果你是一个正在使用且非常喜爱苹果 Apple 产品的用户，毫无疑问《乔布斯》这本传记是非常值得一读的。</p><p>通读之后我对手中的 iPhone 和 MacBook 有更深了解。是什么造就了这么优美的产品，精致优雅。</p><span id="more"></span><h2 id="是什么造就了苹果公司？"><a href="#是什么造就了苹果公司？" class="headerlink" title="是什么造就了苹果公司？"></a>是什么造就了苹果公司？</h2><p>我可以毫不隐晦地说，苹果公司的成功离不开乔布斯个人光环。从两个年轻人在车库中创立手工制作电路板的小作坊，成长为美国乃至世界最具价值的科技公司，乔布斯功不可没。所以苹果公司有着极强的乔布斯个人色彩。</p><h3 id="Apple-II"><a href="#Apple-II" class="headerlink" title="Apple II"></a>Apple II</h3><p>苹果公司真正成为知名公司是从创造了大卖的 <strong>Apple II</strong> 电脑开始，将世界带进了精彩纷呈的个人电脑时代。将近百万台销量的 Apple II 给苹果公司提供持续的盈利和动力，在那期间乔布斯先后研发了市场上最终失败的、以他女儿名字命名的 Lisa 系统，而后转战 Macintosh 系统。</p><h3 id="Macintosh"><a href="#Macintosh" class="headerlink" title="Macintosh"></a>Macintosh</h3><p>之后 <strong>Macintosh</strong> 麦金塔则将个人电脑的系统引领到了图形化界面的时代。微软当时作为一个软件开发商，为麦金塔开发文字处理、表格处理软件，也为其他系统开发各类软件。也是当时比尔盖茨真正深入接触到了图形化操作系统，后来才开发了自己的 Windows 操作系统，一直被乔布斯鄙视为剽窃创意的小偷。</p><h3 id="iPod"><a href="#iPod" class="headerlink" title="iPod"></a>iPod</h3><p>随着音乐数字化、网络化的发展，乔布斯一眼发现市场上的随身听、音乐播放器设计拉胯操作繁琐。唱片公司对数字音乐盗版问题同时也是焦头烂额，不知如何应对这场席卷而来的数字科技革命。</p><p>乔布斯本身是一位音乐的狂热爱好者，将鲍勃迪伦、披头士等作为自己的偶像。他认为有一个使命赋予他来推动音乐行业的进步。于是他创造 <strong>iPod</strong>，风靡全美。</p><p>把1000首歌放进口袋（pocket）。从学生到总统，人人都喜爱。</p><h3 id="iPad"><a href="#iPad" class="headerlink" title="iPad"></a>iPad</h3><p>这是一款特别的产品。它的尺寸介于手机和电脑之间，很多人包括乔布斯也在想，这个产品定位到底是什么？</p><p>iPad 最初缺少优质定制的 App ，也找不到它能替代电脑的生产力场景。如果说 iPhone 的身份是一个通讯工具，那么获取数据能力就是 iPad 最大的长处。较大的屏幕，优异的音响系统，轻薄的机身，确实非常适合作为网页浏览、影音娱乐、邮件收发、读书看报。<br>我们有时候混淆了一些产品的功能性。认为手机功能足够强大，就能替代相机、联系设备、视频观看设备等等。如果你体验过 iPad 观看电影，还是很难说手机小屏幕多良好的体验。</p><h3 id="iPhone"><a href="#iPhone" class="headerlink" title="iPhone"></a>iPhone</h3><p>作为称得上第一款大众消费品的真正意义上的智能机，iPhone 震惊了世界。以它优秀的触控体验，以及曾经在 Macintosh 推出时那种全新的人机交互震撼感又来了！大大超越其他大路货的口碑，赢得无数喝彩。</p><p>有如此之反响，既由于同时期的手机固守老旧的设计、工程和交互停滞不前，也得益于乔布斯超人的前瞻性打造的跨时代产品。</p><h2 id="成功所需的品质"><a href="#成功所需的品质" class="headerlink" title="成功所需的品质"></a>成功所需的品质</h2><p>以前经常有疑惑，伟大的公司和产品背后，是一个什么样的人在主导？我在书中找到了答案。</p><h3 id="专注"><a href="#专注" class="headerlink" title="专注"></a>专注</h3><p>这个品质贯穿乔布斯一生。从他刚开始创业，到成为掌管拥有数万名员工的公司 CEO，或者与同样行业翘楚的朋友聊天，甚至在罹患胰腺癌将要离世之时，都在讨论和践行专注。</p><p>乔布斯带领苹果公司同时只研发2-3个项目，他想要能够集中全公司的资源攻克难题。同时他喜欢协同各部门推进项目。这避免一些大公司资源利用率低，和各部门各自运作恶意增加壁垒产生内耗的问题。</p><h3 id="高超的谈判技巧"><a href="#高超的谈判技巧" class="headerlink" title="高超的谈判技巧"></a>高超的谈判技巧</h3><p>这是一个被大众很容易忽略的重要特质。但乔布斯无疑是拥有的。</p><p>在经营如此体量的消费品公司，处处需要与外部公司、资源合作。</p><p>例如：<br>iPod 成功不仅是因为它是一个体验优秀的硬件，更是因为它提供了丰富的、低价的正版音乐库。这些重量级音乐版权都是乔布斯同唱片行业巨头索尼、华纳兄弟等谈判下来的。之前乔布斯完全不知道唱片行业是如何运作的。</p><p>再有传统媒体的数字版本进入 AppStore 等合作。</p><p>这些都需要高超的商业技巧和过人胆识。</p><h3 id="简洁之美"><a href="#简洁之美" class="headerlink" title="简洁之美"></a>简洁之美</h3><p>乔布斯难以忍受市场上充斥的毫无美感、缺乏人性化的产品，对此嗤之以鼻。所以他就想用自己对美的追求同时对科技产品的狂热，像艺术家一般打造自己心目中的产品。</p><p>他信奉一句名言“自然喜欢简洁与统一”。从始至终，简洁之美贯穿了他经手的项目。其中最为极端的便是 NeXT 一个完美的立方体。</p><p>他自诩是站在人文与科技交叉口的极少数人。我双手赞同！</p><h3 id="追求完美"><a href="#追求完美" class="headerlink" title="追求完美"></a>追求完美</h3><p>在研发产品的过程中，经常会出现产品研发已接近尾声，但乔布斯在某个晚上的突发奇想，意识到之前的设想和规划有误。第二天他会要求全部推翻之前的成果！</p><p>在研发过程中，乔布斯精益求精，对工程师不断鞭策。包括言语上侮辱、自信心打击、让其出丑等等，让乔布斯落下不好名声。乔布斯不是完美的人，性格古怪，对他人冷漠无情。对待工作狂热。</p><p>乔布斯想要完美的艺术品，而不是一个可以简单售卖的商品。</p><h2 id="趣事"><a href="#趣事" class="headerlink" title="趣事"></a>趣事</h2><h3 id="微软是小偷"><a href="#微软是小偷" class="headerlink" title="微软是小偷"></a>微软是小偷</h3><p>和乔布斯同一年出生的还有另一个科技界天才，他是比尔·盖茨。</p><p>比尔·盖茨作为一个实实在在的富二代，拥有聪明的才智、身份显赫的父母、无忧的生活。有趣的是与乔布斯同样在大学时期辍学了。</p><p>乔布斯找到盖茨希望他能让微软公司为其 Macintosh 编写一款文字处理软件。当盖茨来到苹果公司看了 Macintosh 的图形化界面之后，大受震撼。在与苹果公司合同到期之后，立即带领微软公司着手开发 Windows 桌面系统，并一跃而起占领PC系统的大部分市场。<br>乔布斯大为光火，他认为 Windows 抄袭 Macintosh 的 GUI 界面，大骂盖茨是个小偷。<br>乔布斯和比尔·盖茨的两种观点是完完全全的对立派。乔布斯想要端到端的完全控制，将软件和硬件完美结合并牢牢攥紧在自己手里。而盖茨则推崇开放、兼容的态度，以工程师的思维，商业公司 CEO 的立场，尽可能的将微软的软件运行在各种平台上，只要能够盈利便是成功的商业路数。</p><p>现在来看，两位都成功了，在两个对立的世界里。</p><h3 id="谷歌是小偷"><a href="#谷歌是小偷" class="headerlink" title="谷歌是小偷"></a>谷歌是小偷</h3><p>谷歌作为一个搜索引擎的公司为何能与苹果产生冲突呢？<br>焦点在手机系统 Android 上。</p><p>iOS 花费大量心血研制出无比自然的交互特性，一个接一个在 Android 上出现。乔布斯怒不可遏，破口大骂。</p><h3 id="Adobe-背信弃义"><a href="#Adobe-背信弃义" class="headerlink" title="Adobe 背信弃义"></a>Adobe 背信弃义</h3><p>Adobe 与乔布斯颇有渊源。乔布斯曾经支持 Adobe 的 PostScript 技术并让其大获成功，甚至还做过 Adobe 的董事会成员。但是 Apple 后来的立场则表现出对 Adobe 的 Flash 技术嗤之以鼻。乔布斯扬言 Flash 是垃圾，满是漏洞还拖慢运行速度，最终会被 HTLM5 取代。<br>乔布斯的预言终于在2020年成真。 Adobe 与2020年12月31日正式宣布结束 Flash 的支持。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>乔布斯人品实在说不上咋样，但是他才华是众所周知的。在他逝去之后，不少人认为现在的苹果已经没有了往日的光彩。</p><p>没错，乔布斯的的确确是苹果公司的精神领袖。他凭一己之力，一己对产品的热情，像艺术家一般对待精心创造的艺术品来研发工业产品，并推广到大众群体。他的某些品质尤为珍贵。</p><p>感谢乔布斯。一次次发布惊艳的产品，一次次沉重地打败竞争对手，迫使行业追赶进步。让大众切实享受到科技的人文魅力，而不是简单丑陋的机械或者冰冷的功能。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://vip2.loli.io/2023/03/19/Hbtdm56zCeEaSIK.jpg&quot; alt=&quot;steve jobs&quot;&gt;&lt;br&gt;如果你是一个正在使用且非常喜爱苹果 Apple 产品的用户，毫无疑问《乔布斯》这本传记是非常值得一读的。&lt;/p&gt;
&lt;p&gt;通读之后我对手中的 iPhone 和 MacBook 有更深了解。是什么造就了这么优美的产品，精致优雅。&lt;/p&gt;</summary>
    
    
    
    
    <category term="book" scheme="https://www.vatery.com/tags/book/"/>
    
  </entry>
  
  <entry>
    <title>番茄工作法给我的新灵感</title>
    <link href="https://www.vatery.com/2023/02/28/%E7%95%AA%E8%8C%84%E5%B7%A5%E4%BD%9C%E6%B3%95%E7%BB%99%E6%88%91%E7%9A%84%E6%96%B0%E7%81%B5%E6%84%9F/"/>
    <id>https://www.vatery.com/2023/02/28/%E7%95%AA%E8%8C%84%E5%B7%A5%E4%BD%9C%E6%B3%95%E7%BB%99%E6%88%91%E7%9A%84%E6%96%B0%E7%81%B5%E6%84%9F/</id>
    <published>2023-02-28T06:33:57.000Z</published>
    <updated>2024-06-08T10:16:37.702Z</updated>
    
    <content type="html"><![CDATA[<p>🍅番茄工作法众所周知是提高工作效率的时间管理方法，我在使用的过程中有了新的灵感。<br><img src="https://vip2.loli.io/2023/02/28/Mi3PBODg58qSALo.jpg"></p><span id="more"></span><p>25分钟一个番茄，它要求专注于当前的任务，避免在番茄工作时间内分散注意力，直到番茄时间结束。<br>我在实践中发现了一个对我有效的新感受：</p><p><strong>番茄时间的结束可以打断我，让我短暂清醒，从新角度思考 。</strong></p><p>我时常会专注于一件事情，然后沉入进去。这样很好，但有些时候却不是。</p><p>我是一个程序开发者，经常会遇到各种各样的难题，1个小时都没有头绪是家常便饭。可能是问题很难，可能是我能力有限，也有可能是我思路不对。尤其在思路方向出问题的时候，我的思维卡壳、大脑空转做无意义的消耗。此时最好的方式让思维跳脱出来，给大脑一点休息的时间，转移注意力或许灵感就会找上门来。</p><p>最初发现这个现象是深夜处理难题无果去冲澡中会有灵感闪现，茅塞顿开。现在当我使用番茄工作法时，通过强制自己在番茄结束时停下手头工作，刻意中断我的专注力，不让自己过于陷入思维的泥潭，常常帮助到我。</p><p>大多数的时候思路卡住，在停下来后做点别的事，例如喝杯茶、散散步、聊聊天，我都能找到一个新的角度看待问题，发现之前的想法太过复杂。不可思议的是，这些灵感往往很有效！</p><p>P.S. 有些理解乔布斯每年会举行一次员工集思会，选定一个度假区展开头脑风暴会议。跳脱出原有工作环境，从旁观者的角度，更容易迸发新想法💡！</p><p>P.P.S. 图片中的番茄时钟摆件非常好用，操作简单、设计简洁。推荐！</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;🍅番茄工作法众所周知是提高工作效率的时间管理方法，我在使用的过程中有了新的灵感。&lt;br&gt;&lt;img src=&quot;https://vip2.loli.io/2023/02/28/Mi3PBODg58qSALo.jpg&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="work" scheme="https://www.vatery.com/tags/work/"/>
    
  </entry>
  
  <entry>
    <title>alist网盘挂载神器</title>
    <link href="https://www.vatery.com/2023/01/16/alist%E7%BD%91%E7%9B%98%E6%8C%82%E8%BD%BD%E7%A5%9E%E5%99%A8/"/>
    <id>https://www.vatery.com/2023/01/16/alist%E7%BD%91%E7%9B%98%E6%8C%82%E8%BD%BD%E7%A5%9E%E5%99%A8/</id>
    <published>2023-01-16T05:02:49.000Z</published>
    <updated>2024-06-08T10:16:37.702Z</updated>
    
    <content type="html"><![CDATA[<p>不得不说，alist是目前挂载网盘方面的工具里，我用起来最省心、体验度最高的产品。</p><span id="more"></span><h2 id="alist带来了什么"><a href="#alist带来了什么" class="headerlink" title="alist带来了什么"></a>alist带来了什么</h2><p>首先他能够管理多个平台的网盘，集成到统一的自建平台。</p><p>另外向外提供了WebDAV的访问方式，大大提高自由度。</p><h2 id="🥰推荐理由"><a href="#🥰推荐理由" class="headerlink" title="🥰推荐理由"></a>🥰推荐理由</h2><h3 id="首先它是开源的"><a href="#首先它是开源的" class="headerlink" title="首先它是开源的"></a>首先它是开源的</h3><p>网盘类产品，都是偏私人化使用的。那么隐私尤其显得重要，开源能够让我们更放心的使用。</p><p>代码仓库： <a href="https://github.com/alist-org/alist">https://github.com/alist-org/alist</a></p><h3 id="拥有丰富的特性"><a href="#拥有丰富的特性" class="headerlink" title="拥有丰富的特性"></a>拥有丰富的特性</h3><ul><li>Go语言开发，高性能低占用</li><li>丰富的网盘支持</li><li>易懂完整的文档</li><li>丰富的安装方式和一键安装脚本</li></ul><p>这些都是吸引我的点</p><p><img src="https://vip2.loli.io/2023/01/16/kIPBTn6LC4MFRWZ.png" alt="Pasted image 20230116125333.png"></p><h2 id="🤩我是怎么用的"><a href="#🤩我是怎么用的" class="headerlink" title="🤩我是怎么用的"></a>🤩我是怎么用的</h2><h3 id="PC本地挂载"><a href="#PC本地挂载" class="headerlink" title="PC本地挂载"></a>PC本地挂载</h3><p>最重磅的功能就是能够提供WebDAV服务。这样我就能将阿里云盘、百度网盘等挂载到我的电脑上，犹如访问本地盘一样，大大拓展了容量。不再需要另外打开网盘网站或者app，被限制自由度。</p><h3 id="NAS挂载"><a href="#NAS挂载" class="headerlink" title="NAS挂载"></a>NAS挂载</h3><p>应该是大部分的NAS系统都支持WebDAV挂载，但很少接入各类网盘。有了alist的WebDAV作为中间和网盘沟通的中转站，那么NAS的网络备份能力上了不止一个档次。<br>大家都知道数据的重要性，不然也不会使用NAS。有了NAS的raid物理硬盘备份，有时还是会忧虑，多个硬盘同时挂了怎么办？如果能够提供网络的异地备份，安全性、冗余度又上升了！<br>例如我通过群晖的Cloud Sync将数据<strong>加密备份</strong>到百度网盘和阿里云盘，其中阿里云盘没有接口，alist就发挥了巨大作用使之能够实现挂载。</p><h3 id="Infuse影音库"><a href="#Infuse影音库" class="headerlink" title="Infuse影音库"></a>Infuse影音库</h3><p>有了WebDAV标准协议后，非常多的软件都能接入网盘。<br>Infuse接入阿里云盘就是一个特别实用的场景。Infuse配合阿里云盘就相当于有一个在线网络视频库，还带有视频元数据刮削，体验流畅！</p><p><img src="https://vip2.loli.io/2023/01/16/JpZX3sjtguCI64S.png" alt="Pasted image 20230116124511.png"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;不得不说，alist是目前挂载网盘方面的工具里，我用起来最省心、体验度最高的产品。&lt;/p&gt;</summary>
    
    
    
    
    <category term="WebDAV" scheme="https://www.vatery.com/tags/WebDAV/"/>
    
  </entry>
  
  <entry>
    <title>2023年度计划</title>
    <link href="https://www.vatery.com/2023/01/02/2023%E5%B9%B4%E5%BA%A6%E8%AE%A1%E5%88%92/"/>
    <id>https://www.vatery.com/2023/01/02/2023%E5%B9%B4%E5%BA%A6%E8%AE%A1%E5%88%92/</id>
    <published>2023-01-02T05:22:10.000Z</published>
    <updated>2024-06-08T10:16:37.702Z</updated>
    
    <content type="html"><![CDATA[<p>新的一年以年度计划开篇是顶好的。</p><span id="more"></span><p><img src="https://vip2.loli.io/2023/01/02/jkEvdXOIseBfut2.jpg" alt="ian-schneider-PAykYb-8Er8-unsplash.jpg"></p><h2 id="💰理财"><a href="#💰理财" class="headerlink" title="💰理财"></a>💰理财</h2><p>系统学习金融理财知识，而不是人云亦云地进行赌博。</p><p>暂时想到：</p><ul><li>如何读财报</li><li>调研分析公司背景、管理人员</li><li>宏观形势分析</li></ul><h2 id="👨‍💻技术"><a href="#👨‍💻技术" class="headerlink" title="👨‍💻技术"></a>👨‍💻技术</h2><p>首要的目标是学习swiftUI。能够独立开发简单的iOS&#x2F;macOS程序。</p><p>其次可以深入了解Rust语言，以及附带使用Python。</p><p>Rust是一种极强大且具有表现力的现代后端语言，深入的了解能够增进对各类编程语言以及计算机系统的学习。</p><p>Python则是一门脚本型语言，它更多表现在便利的工具性方面，提高工作生活的效率，并不需要特别深入用作开发项目。</p><h2 id="📖读书"><a href="#📖读书" class="headerlink" title="📖读书"></a>📖读书</h2><p>输入是必不可少的。<br>至少要做到每天30分钟的阅读。</p><p>书单：</p><h3 id="传记"><a href="#传记" class="headerlink" title="传记"></a>传记</h3><ul><li><input checked="" disabled="" type="checkbox"> 史蒂夫・乔布斯传</li><li><input checked="" disabled="" type="checkbox"> 硅谷钢铁侠：埃隆・马斯克的冒险人生</li></ul><h3 id="效率"><a href="#效率" class="headerlink" title="效率"></a>效率</h3><ul><li><input checked="" disabled="" type="checkbox"> 蛤蟆先生去看心理医生</li><li><input checked="" disabled="" type="checkbox"> 做对产品</li><li><input checked="" disabled="" type="checkbox"> 卡片笔记写作法</li></ul><h3 id="编程"><a href="#编程" class="headerlink" title="编程"></a>编程</h3><ul><li><input disabled="" type="checkbox"> Unix编程艺术</li><li><input disabled="" type="checkbox"> 流畅的python</li></ul><h3 id="社会人文"><a href="#社会人文" class="headerlink" title="社会人文"></a>社会人文</h3><ul><li><input checked="" disabled="" type="checkbox"> 微习惯：简单到不可能失败的自我管理法则</li><li><input checked="" disabled="" type="checkbox"> 别独自用餐：克林顿还是穷小子时如何建立顶级社交圈</li><li><input disabled="" type="checkbox"> 国富论</li></ul><h3 id="理财"><a href="#理财" class="headerlink" title="理财"></a>理财</h3><ul><li><input checked="" disabled="" type="checkbox"> 彼得林奇的成功投资</li><li><input disabled="" type="checkbox"> 笑傲股市</li></ul><h3 id="小说"><a href="#小说" class="headerlink" title="小说"></a>小说</h3><ul><li><input checked="" disabled="" type="checkbox"> 美丽新世界</li><li><input checked="" disabled="" type="checkbox"> 黄金时代</li></ul><h2 id="✍️写作"><a href="#✍️写作" class="headerlink" title="✍️写作"></a>✍️写作</h2><p>在输入的同时，需搭配输出。输出也是一种思考，可以用作复盘和反思。<br>约定在2023年24篇文章的产出（基本每月2篇）。<br>灵感来源可以是读书&#x2F;文章，Ted演讲等等。</p><h2 id="💪健身"><a href="#💪健身" class="headerlink" title="💪健身"></a>💪健身</h2><p>身体强健是万事之本。<br>我本身不爱运动，但是也深知健康体魄之重要性。<br>所以强制要求自己进行一定训练。<br>每周进行2次有氧运动。</p><p>与君共勉！</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;新的一年以年度计划开篇是顶好的。&lt;/p&gt;</summary>
    
    
    
    
    <category term="2023" scheme="https://www.vatery.com/tags/2023/"/>
    
    <category term="plan" scheme="https://www.vatery.com/tags/plan/"/>
    
  </entry>
  
  <entry>
    <title>增加对生活的控制</title>
    <link href="https://www.vatery.com/2022/12/17/%E5%A2%9E%E5%8A%A0%E5%AF%B9%E7%94%9F%E6%B4%BB%E7%9A%84%E6%8E%A7%E5%88%B6/"/>
    <id>https://www.vatery.com/2022/12/17/%E5%A2%9E%E5%8A%A0%E5%AF%B9%E7%94%9F%E6%B4%BB%E7%9A%84%E6%8E%A7%E5%88%B6/</id>
    <published>2022-12-17T07:09:04.000Z</published>
    <updated>2024-06-08T10:16:37.702Z</updated>
    
    <content type="html"><![CDATA[<p>以前以为只是自己还小，不懂生活的残酷，无忧无虑。现在长大了，才知道活着有多累。但是情况真的只能这么糟糕吗？<br>直到我发现了生活的真谛…</p><span id="more"></span><h2 id="反思"><a href="#反思" class="headerlink" title="反思"></a>反思</h2><p>「增加对生活的控制」表明我以前生活的诸多问题：</p><ul><li>对待事务的起因没有兴趣</li><li>对待事务的过程不够认真</li><li>对待事务结果是无所谓的态度</li></ul><p>最后整件事有很多种结果，普通较多、糟糕也有，满意的却很少。<br>自己能有什么收获呢，能有什么成长呢？</p><p>我需要改变！</p><h2 id="领悟"><a href="#领悟" class="headerlink" title="领悟"></a>领悟</h2><p>这个概念看似简单明了，也是我在厨房做菜的时候突然领悟的。</p><p>我刚开始学做饭的时候，手忙脚乱，弄的厨房一团糟。后来看网络视频学习做菜，发现做出可食用的、口味过得去的饭菜，也没有那么复杂。<br>但过程总是很狼狈，觉得做饭菜又脏又累。</p><p>我慢慢注意一些大厨的细节，看到他们对每一项步骤都有很强的把控。例如有一块干净的经常叠整齐放在手边；下锅的酱料提前在碗中按量备好，防止调味不及等等。</p><p>用便签纸记录下冰箱里还剩的食材；通过家里有的食材安排今晚的菜单，复杂的、新式的菜肴都会记录好大概步骤用便签纸贴在油烟机上；安排做菜的顺序，同时锅里煮的时候，清洗下一道菜的食料。</p><p>等很多东西都被自己精心设计、编排过后，发现复杂的事情变简单了。</p><h2 id="进步"><a href="#进步" class="headerlink" title="进步"></a>进步</h2><p>以下都是对生活增加控制的一些小方法：</p><h3 id="记录"><a href="#记录" class="headerlink" title="记录"></a>记录</h3><p>使用<strong>纸和笔</strong>记录。</p><p>我发现现在的我（30岁）记忆如同80的爷爷得了老年痴呆一般，10分钟前想起的念头，转眼就忘记。其实也不必太担心。现在生活被信息流充斥，并不是大家的脑力不行，而是根本装不下那么多东西，很多时候是被无用的信息占据。</p><p>抛弃电子化记录。因为电子化记录完成之后，对我来说很难有机会再打开进行回顾。过两年那份文档都不知道去了哪里。纸质材料积累到一定程度，发现有许多时内心会很有成就感。甚至有时胡一乱想，觉着写一本书也没多难嘛🤣。</p><p>记录本身很重要，还有一个同样举足轻重的点就在于<strong>回顾复盘</strong>。</p><h3 id="便签纸"><a href="#便签纸" class="headerlink" title="便签纸"></a>便签纸</h3><p>这是记录的一种实体化方式。</p><p>以前的我不以为然，现在深知这是多么伟大的一项发明！<br>便签纸可以贴在任意的地方，比如冰箱、纸箱、电脑屏幕边等等。很多时候就不需要再进行检查盒子<em>（包括脑袋）</em>里的东西，一目了然。</p><p>重要事项我会写下便签纸贴在电脑屏幕边，怎么样都不会遗落了。<br>当然电脑里的ToDo同样会记录一份，统一管理。</p><p>所以开始使用便签纸吧，释放自己的大脑空间！</p><h3 id="定时"><a href="#定时" class="headerlink" title="定时"></a>定时</h3><p>设定一个时间点做什么事。</p><p>把任务的截止时间明确化，也明确了任务本身和其重要性。<br>人都有拖沓的症状，但是很多事情早做比晚做在结果上有很大差别。</p><p>催促自己去做事，自己推动生活。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;以前以为只是自己还小，不懂生活的残酷，无忧无虑。现在长大了，才知道活着有多累。但是情况真的只能这么糟糕吗？&lt;br&gt;直到我发现了生活的真谛…&lt;/p&gt;</summary>
    
    
    
    
    <category term="life" scheme="https://www.vatery.com/tags/life/"/>
    
  </entry>
  
  <entry>
    <title>Taro开发小程序的经验</title>
    <link href="https://www.vatery.com/2021/05/07/Taro%E5%BC%80%E5%8F%91%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%9A%84%E7%BB%8F%E9%AA%8C/"/>
    <id>https://www.vatery.com/2021/05/07/Taro%E5%BC%80%E5%8F%91%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%9A%84%E7%BB%8F%E9%AA%8C/</id>
    <published>2021-05-07T08:28:16.000Z</published>
    <updated>2024-06-08T10:16:37.702Z</updated>
    
    <content type="html"><![CDATA[<p>Taro 从2的不完善到3的大版本更新，从底层优化加快的编译兼容性和速度，但是也发生了很多的变化。这里总结了Taro不同版本的开发经验。</p><span id="more"></span><h2 id="版本"><a href="#版本" class="headerlink" title="版本"></a>版本</h2><p>Taro的版本更新还是很快的，但是一个大问题是，向下兼容性堪忧。</p><p>例如3与2的版本是完全不兼容，如果要升级，也是比较麻烦的，难以做到平滑升级。</p><p>在前端项目组有多个小程序项目的情况下，使用不同Taro版本开发，特别需要注意CLI的版本会直接影响项目启动，不推荐使用全局安装CLI，而是安装到项目本地里面。</p><h2 id="稳定性"><a href="#稳定性" class="headerlink" title="稳定性"></a>稳定性</h2><p>Taro的稳定性也较差，在新版本发布后可能会引入BUG，直接影响项目开发编译。</p><h2 id="Taro-UI"><a href="#Taro-UI" class="headerlink" title="Taro UI"></a>Taro UI</h2><p>Taro UI的开发与Taro是分开的，具体表现出的问题是，Taro3.0已经发布，但是长时间Taro UI仍然是2.x，导致项目框架升级，却因为Taro UI不能运行，而只能降级！<br>所以推荐各位使用第三方组件或者自己开发封装，而避免版本依赖。</p><h2 id="小程序开发工具"><a href="#小程序开发工具" class="headerlink" title="小程序开发工具"></a>小程序开发工具</h2><p>小程序的开发工具更新也较频繁，但是每次更新后的表现都比较诡异。通常需要重新打开，进行重新编译。</p><p>有时GitHub的issue分析不出原因，很多开发者将问题怪罪于小程序开发工具。</p><p>只能说这两个都不稳定。</p><h2 id="生态"><a href="#生态" class="headerlink" title="生态"></a>生态</h2><p>Taro的生态并不好，尤其论坛里，存在好多问题，但是没有管理员或者热心开发者进行解答。</p><p>而GitHub的issue里，bot出现干预过多，项目贡献者回复、解答就比较少，也不够详细，经常没有结论就被bot关闭。</p><h2 id="地图"><a href="#地图" class="headerlink" title="地图"></a>地图</h2><p>微信小程序的地图由于其封闭性，只能使用自带的Map组件，引擎是腾讯地图，功能操作部分并没有那么友好。比如，没有自动规划路径、计算距离等等。需要实现这些功能，则需要额外引入腾讯地图的jssdk。</p><p>这里有个坑，个人默认用量是1万次调用&#x2F;天，企业账号默认也是相同，导致测试时一切正常，等正式上线会出现调用次数超出限制的报错。</p><p>企业账号可以免费申请额度到更高，但是需要提交工单，比如：逆地址解析（通过经纬度查询地址城市街道等信息）可以申请到300万调用&#x2F;天。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Taro 从2的不完善到3的大版本更新，从底层优化加快的编译兼容性和速度，但是也发生了很多的变化。这里总结了Taro不同版本的开发经验。&lt;/p&gt;</summary>
    
    
    
    
    <category term="web" scheme="https://www.vatery.com/tags/web/"/>
    
    <category term="Taro" scheme="https://www.vatery.com/tags/Taro/"/>
    
  </entry>
  
  <entry>
    <title>Vue大型项目的探索</title>
    <link href="https://www.vatery.com/2021/04/12/Vue%E5%A4%A7%E5%9E%8B%E9%A1%B9%E7%9B%AE%E7%9A%84%E6%8E%A2%E7%B4%A2/"/>
    <id>https://www.vatery.com/2021/04/12/Vue%E5%A4%A7%E5%9E%8B%E9%A1%B9%E7%9B%AE%E7%9A%84%E6%8E%A2%E7%B4%A2/</id>
    <published>2021-04-12T07:46:32.000Z</published>
    <updated>2024-06-08T10:16:37.702Z</updated>
    
    <content type="html"><![CDATA[<p>当一个 Vue 项目源文件达到 400 以上时，发现开发起来已经显得有些臃肿，本文就在多个方面进行一些模块化的尝试。</p><span id="more"></span><h2 id="更低程度的模块化"><a href="#更低程度的模块化" class="headerlink" title="更低程度的模块化"></a>更低程度的模块化</h2><p>通常 CLI 生成的项目结构都比较简单，易于上手。一般来说都会安装 Vuex、Vue Router 包进行配合开发，他们的默认结构大体是这样的：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">├── App.vue</span><br><span class="line">├── assets</span><br><span class="line">├── main.js</span><br><span class="line">├── pages</span><br><span class="line">├── router</span><br><span class="line">└── store</span><br></pre></td></tr></table></figure><p>在小型项目中，开发完全没有问题，即使大型项目也是可以继续开发的，但是我们会发现一些问题，比如：</p><ul><li>router 中的 router.js 路由文件越来越大，十分复杂</li><li>store 中管理非常多的状态，混乱度增加</li><li>pages 主要业务文件夹中，页面列表越来越长，业务内聚力差</li></ul><p>在业务成长一定程度后，基调必定会确定下来，通过分析思考，我们可以在业务里提取出模块。例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">├── App.vue</span><br><span class="line">├── assets</span><br><span class="line">├── main.js</span><br><span class="line">├── modules # 原pages</span><br><span class="line">│   ├── Business</span><br><span class="line">│   ├── Device</span><br><span class="line">│   ├── Search</span><br><span class="line">│   └── ...</span><br><span class="line">├── router</span><br><span class="line">└── store</span><br></pre></td></tr></table></figure><p>在此基础上，将 router 和 store 的配置，下放到每一个 module 去。这样主目录下的 router 和 store 都会变得比较简单。而在每个 module 中，router 和 store 都更密切的关联该模块。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">├── App.vue</span><br><span class="line">├── assets</span><br><span class="line">├── main.js</span><br><span class="line">├── modules # 原pages</span><br><span class="line">│   ├── Business</span><br><span class="line">│   │     ├── pages</span><br><span class="line">│   │     ├── index.js</span><br><span class="line">│   │     ├── router.js</span><br><span class="line">│   │     └── store.js</span><br><span class="line">│   ├── Device</span><br><span class="line">│   ├── Search</span><br><span class="line">│   └── ...</span><br><span class="line">├── router</span><br><span class="line">└── store</span><br></pre></td></tr></table></figure><h2 id="视图、业务逻辑分离"><a href="#视图、业务逻辑分离" class="headerlink" title="视图、业务逻辑分离"></a>视图、业务逻辑分离</h2><p>Vue 快速开发的特色之一，就是在单一的一个 vue 文件中，可以写入 template、js 和 css，开发者不需要切换多个页面。但是在大型的表单类页面中，需求上设计的就非常复杂，不考虑各种优化的情况下，页面代码量可能达到 1000 行以上，在这种页面中进行修改和增加新的代码极容易出现问题。</p><p>当然，解决方案之一是组件化，但是对于表单来说，整个表单就是多个组件组合而成，而且本身表单组件也复杂，所以组件化只能解决部分问题。</p><p>这里我提出的方案，灵感来自于 AngularJS 的文件结构和 Vue Router 中的<code>mapActions</code>方法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">user</span><br><span class="line">├── index.vue</span><br><span class="line">└── index.service.js</span><br></pre></td></tr></table></figure><p>将部分复杂的逻辑，抽取到<code>index.service.js</code>中，如何引入到<code>index.vue</code>中呢？</p><p>非常简单：</p><p>File: <code>index.vue</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- ... --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tempate</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> mapServices <span class="keyword">from</span> <span class="string">&#x27;@/utils/service.js&#x27;</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> service <span class="keyword">from</span> <span class="string">&#x27;./index.service.js&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">created</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">this</span>.<span class="title function_">fetchData</span>() <span class="comment">// 直接调用map进来的方法</span></span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">    ...<span class="title function_">mapServices</span>(service)([</span></span><br><span class="line"><span class="language-javascript">      <span class="string">&#x27;login&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="string">&#x27;logout&#x27;</span></span></span><br><span class="line"><span class="language-javascript">      <span class="string">&#x27;register&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="string">&#x27;fetchData&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    ])</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>File: <code>index.service.js</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">login</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">logout</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">register</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fetchData</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  login,</span><br><span class="line">  logout,</span><br><span class="line">  register,</span><br><span class="line">  fetchData,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>File: <code>@/utils/service.js</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">mapServices</span>(<span class="params">services</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (!services) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;&#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="function">(<span class="params">props</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="title class_">Array</span>.<span class="title function_">isArray</span>(props)) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;mapServices only accept an Array&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> funcs = &#123;&#125;;</span><br><span class="line">    props.<span class="title function_">forEach</span>(<span class="function">(<span class="params">propName</span>) =&gt;</span> &#123;</span><br><span class="line">      services[propName] &amp;&amp; (funcs[propName] = services[propName]);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> funcs;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种方式即可将逻辑分散到其他文件中，并在 vue 主文件中，也不失关联性的，能够自然开发。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;当一个 Vue 项目源文件达到 400 以上时，发现开发起来已经显得有些臃肿，本文就在多个方面进行一些模块化的尝试。&lt;/p&gt;</summary>
    
    
    
    
    <category term="Vue" scheme="https://www.vatery.com/tags/Vue/"/>
    
    <category term="javascript" scheme="https://www.vatery.com/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>Create-React-App创建的项目进行多页面构建</title>
    <link href="https://www.vatery.com/2020/09/08/Create-React-App-Multi-Entry-Points/"/>
    <id>https://www.vatery.com/2020/09/08/Create-React-App-Multi-Entry-Points/</id>
    <published>2020-09-08T04:00:00.000Z</published>
    <updated>2024-06-08T10:16:37.702Z</updated>
    
    <content type="html"><![CDATA[<p>一个项目，两个页面，共用组件！没错，就是Multi Entry Point。</p><span id="more"></span><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><ul><li>在一个前端项目中，需要有<code>前台用户</code>和<code>后台管理</code>两个站点</li><li>登录页面设计完全独立，与主界面不一致</li><li>拆分bundle文件，优化项目文件大小</li></ul><p>等等情况都可以使用多个Entry Point解决。</p><p>由于通过<code>create-react-app</code>创建的React项目，webpack的配置是经过封装的。而且官方也说明，不会通过简易方式提供entry point的配置，需要自己对webpack.config.js进行自定义修改。</p><h2 id="方案"><a href="#方案" class="headerlink" title="方案"></a>方案</h2><p>主要参考来自两篇文章</p><ul><li><a href="https://stackoverflow.com/a/61815449">StackOverflow</a></li><li><a href="https://github.com/danvc/create-react-app-multiple-entry-points">Github</a></li></ul><ol><li><p>先通过<code>yarn eject</code> 把webpack的配置文件暴露出来。（曾经试过用craco进行更少副作用的配置，由于自由度不够强大，失败告终）</p></li><li><p><code>/config/paths.js</code> 中添加appPages</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> appPages = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">&quot;name&quot;</span>: <span class="string">&quot;user&quot;</span>,</span><br><span class="line">    <span class="string">&quot;title&quot;</span>: <span class="string">&quot;user&quot;</span>,</span><br><span class="line">    <span class="string">&quot;appHtml&quot;</span>: <span class="string">&quot;public/user.html&quot;</span>, <span class="comment">// 注入的模板文件</span></span><br><span class="line">    <span class="string">&quot;appIndexJs&quot;</span>: <span class="string">&quot;src/pages/User/index&quot;</span> <span class="comment">// 入口文件</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">&quot;name&quot;</span>: <span class="string">&quot;admin&quot;</span>,</span><br><span class="line">    <span class="string">&quot;title&quot;</span>: <span class="string">&quot;admin&quot;</span>,</span><br><span class="line">    <span class="string">&quot;appHtml&quot;</span>: <span class="string">&quot;public/admin.html&quot;</span>, <span class="comment">// 注入的模板文件</span></span><br><span class="line">    <span class="string">&quot;appIndexJs&quot;</span>: <span class="string">&quot;src/pages/Admin/index&quot;</span> <span class="comment">// 入口文件</span></span><br><span class="line">  &#125;</span><br><span class="line">].<span class="title function_">map</span>(<span class="function"><span class="params">p</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    ...p,</span><br><span class="line">    <span class="attr">appHtml</span>: <span class="title function_">resolveApp</span>(p.<span class="property">appHtml</span>), <span class="comment">// 注入的模板文件</span></span><br><span class="line">    <span class="attr">appIndexJs</span>: <span class="title function_">resolveModule</span>(resolveApp, p.<span class="property">appIndexJs</span>) <span class="comment">// 入口文件</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="attr">appPages</span>: appPages <span class="comment">// 暴露出变量</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>webpack.config.js</code> 配置entry points</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> entries = &#123;&#125;;</span><br><span class="line">paths.<span class="property">appPages</span>.<span class="title function_">forEach</span>(<span class="function"><span class="params">appPage</span> =&gt;</span> &#123;</span><br><span class="line">  entries[appPage.<span class="property">name</span>] = [</span><br><span class="line">    isEnvDevelopment &amp;&amp; <span class="built_in">require</span>.<span class="title function_">resolve</span>(<span class="string">&#x27;react-dev-utils/webpackHotDevClient&#x27;</span>),</span><br><span class="line">    appPage.<span class="property">appIndexJs</span>,</span><br><span class="line">  ].<span class="title function_">filter</span>(<span class="title class_">Boolean</span>)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="comment">/* entry: [</span></span><br><span class="line"><span class="comment">      isEnvDevelopment &amp;&amp;</span></span><br><span class="line"><span class="comment">         require.resolve(&#x27;react-dev-utils/webpackHotDevClient&#x27;),</span></span><br><span class="line"><span class="comment">      paths.appIndexJs,</span></span><br><span class="line"><span class="comment">  ].filter(Boolean), */</span></span><br><span class="line">  <span class="attr">entry</span>: entries <span class="comment">// 注释掉默认的，配置webpack的多个entry</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>webpack.config.js</code>配置HtmlPlugin，进行静态页面的注入<srcipt></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> htmlPlugins = []</span><br><span class="line">paths.<span class="property">appPages</span>.<span class="title function_">forEach</span>(<span class="function"><span class="params">appPage</span> =&gt;</span> &#123;</span><br><span class="line">  htmlPlugins.<span class="title function_">push</span>(</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">HtmlWebpackPlugin</span>(</span><br><span class="line">      <span class="title class_">Object</span>.<span class="title function_">assign</span>(</span><br><span class="line">        &#123;&#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">inject</span>: <span class="literal">true</span>,</span><br><span class="line">          <span class="attr">template</span>: appPage.<span class="property">appHtml</span>,</span><br><span class="line">          <span class="attr">filename</span>: <span class="string">`<span class="subst">$&#123;appPage.name&#125;</span>.html`</span>,</span><br><span class="line">          <span class="attr">title</span>: appPage.<span class="property">title</span>,</span><br><span class="line">          <span class="attr">chunks</span>: [appPage.<span class="property">name</span>]</span><br><span class="line">        &#125;,</span><br><span class="line">        isEnvProduction</span><br><span class="line">        ? &#123;</span><br><span class="line">          <span class="attr">minify</span>: &#123;</span><br><span class="line">            <span class="attr">removeComments</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">collapseWhitespace</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">removeRedundantAttributes</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">useShortDoctype</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">removeEmptyAttributes</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">removeStyleLinkTypeAttributes</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">keepClosingSlash</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">minifyJS</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">minifyCSS</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">minifyURLs</span>: <span class="literal">true</span>,</span><br><span class="line">          &#125;,</span><br><span class="line">        &#125;</span><br><span class="line">        : <span class="literal">undefined</span></span><br><span class="line">      )</span><br><span class="line">    )</span><br><span class="line">  )</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="attr">plugins</span>: [</span><br><span class="line">  ...htmlPlugins, <span class="comment">// 填入plugins</span></span><br><span class="line">  <span class="comment">// ...把原来的看需求去留</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure></li><li><p><code>webpack.config.js</code> 更新ManifestPlugin加载新的entry point</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">ManifestPlugin</span>(&#123;</span><br><span class="line">  <span class="attr">fileName</span>: <span class="string">&#x27;asset-manifest.json&#x27;</span>,</span><br><span class="line">  <span class="attr">publicPath</span>: paths.<span class="property">publicUrlOrPath</span>,</span><br><span class="line">  <span class="attr">generate</span>: <span class="function">(<span class="params">seed, files, entrypoints</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> manifestFiles = files.<span class="title function_">reduce</span>(<span class="function">(<span class="params">manifest, file</span>) =&gt;</span> &#123;</span><br><span class="line">      manifest[file.<span class="property">name</span>] = file.<span class="property">path</span>;</span><br><span class="line">      <span class="keyword">return</span> manifest;</span><br><span class="line">    &#125;, seed);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 增加的代码</span></span><br><span class="line">    <span class="keyword">let</span> entrypointFiles = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> [entryFile, fileName] <span class="keyword">of</span> <span class="title class_">Object</span>.<span class="title function_">entries</span>((entrypoints))) &#123;</span><br><span class="line">      <span class="keyword">let</span> notMapFiles = fileName.<span class="title function_">filter</span>(<span class="function"><span class="params">fileName</span> =&gt;</span> !fileName.<span class="title function_">endsWith</span>(<span class="string">&#x27;.map&#x27;</span>));</span><br><span class="line">      entrypointFiles = entrypointFiles.<span class="title function_">concat</span>(notMapFiles);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// const entrypointFiles = entrypoints.main.filter(</span></span><br><span class="line">    <span class="comment">//   fileName =&gt; !fileName.endsWith(&#x27;.map&#x27;)</span></span><br><span class="line">    <span class="comment">// );</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">files</span>: manifestFiles,</span><br><span class="line">      <span class="attr">entrypoints</span>: entrypointFiles,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;),</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p><code>webpack.config.js</code> 最重要的一步，更改生成的js文件名称</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">output</span>: &#123;</span><br><span class="line">  <span class="attr">path</span>: isEnvProduction ? paths.<span class="property">appBuild</span> : <span class="literal">undefined</span>,</span><br><span class="line">    <span class="attr">pathinfo</span>: isEnvDevelopment,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 由bundle.js 改为[name].bundle.js</span></span><br><span class="line">    <span class="attr">filename</span>: isEnvProduction</span><br><span class="line">      ? <span class="string">&#x27;static/js/[name].[contenthash:8].js&#x27;</span></span><br><span class="line">      : isEnvDevelopment &amp;&amp; <span class="string">&#x27;static/js/[name].bundle.js&#x27;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="attr">futureEmitAssets</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">chunkFilename</span>: isEnvProduction</span><br><span class="line">      ? <span class="string">&#x27;static/js/[name].[contenthash:8].chunk.js&#x27;</span></span><br><span class="line">      : isEnvDevelopment &amp;&amp; <span class="string">&#x27;static/js/[name].chunk.js&#x27;</span>,</span><br><span class="line">    <span class="attr">publicPath</span>: paths.<span class="property">publicUrlOrPath</span>,</span><br><span class="line">    <span class="attr">devtoolModuleFilenameTemplate</span>: isEnvProduction</span><br><span class="line">      ? <span class="function"><span class="params">info</span> =&gt;</span></span><br><span class="line">        path</span><br><span class="line">          .<span class="title function_">relative</span>(paths.<span class="property">appSrc</span>, info.<span class="property">absoluteResourcePath</span>)</span><br><span class="line">          .<span class="title function_">replace</span>(<span class="regexp">/\\/g</span>, <span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">      : isEnvDevelopment &amp;&amp;</span><br><span class="line">        (<span class="function"><span class="params">info</span> =&gt;</span> path.<span class="title function_">resolve</span>(info.<span class="property">absoluteResourcePath</span>).<span class="title function_">replace</span>(<span class="regexp">/\\/g</span>, <span class="string">&#x27;/&#x27;</span>)),</span><br><span class="line">      <span class="attr">jsonpFunction</span>: <span class="string">`webpackJsonp<span class="subst">$&#123;appPackageJson.name&#125;</span>`</span>,</span><br><span class="line">      <span class="attr">globalObject</span>: <span class="string">&#x27;this&#x27;</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>现在就能运行访问了。如果你要额外进行路由配置，则在<code>webpackDevServer.config.js</code>中配置historyApiFallback</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">historyApiFallback</span>: &#123;</span><br><span class="line">  <span class="attr">disableDotRule</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">verbose</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">rewrites</span>: [</span><br><span class="line">    &#123; <span class="attr">from</span>: <span class="regexp">/^\/user/</span>, <span class="attr">to</span>: <span class="string">&#x27;/user.html&#x27;</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">from</span>: <span class="regexp">/^\/admin/</span>, <span class="attr">to</span>: <span class="string">&#x27;/admin.html&#x27;</span> &#125;,</span><br><span class="line">  ]</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;一个项目，两个页面，共用组件！没错，就是Multi Entry Point。&lt;/p&gt;</summary>
    
    
    
    
    <category term="javascript" scheme="https://www.vatery.com/tags/javascript/"/>
    
    <category term="react" scheme="https://www.vatery.com/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>RxJS初体验</title>
    <link href="https://www.vatery.com/2020/07/15/RxJS%E5%88%9D%E4%BD%93%E9%AA%8C/"/>
    <id>https://www.vatery.com/2020/07/15/RxJS%E5%88%9D%E4%BD%93%E9%AA%8C/</id>
    <published>2020-07-15T04:00:00.000Z</published>
    <updated>2024-06-08T10:16:37.702Z</updated>
    
    <content type="html"><![CDATA[<p>让你自由操控「异步事件流」。</p><span id="more"></span><p><em>接触RxJS有一段时间了，也看过很多demo和视频，但是至于怎么运用到自己项目，该替换现有的哪一个模块，还是无从下手。</em></p><h2 id="流"><a href="#流" class="headerlink" title="流"></a>流</h2><p>这是个抽象的话题，但是白话讲：就是一件事情，而且这个事情是复杂的，有流程的。</p><p>例如：点击一个按钮 -&gt; 发出一个请求 -&gt; 根据返回判断是否需要继续轮询 -&gt; 或者结束弹出提示框。</p><p>这种情况，RxJS是适用的。</p><h2 id="话不多说，看代码"><a href="#话不多说，看代码" class="headerlink" title="话不多说，看代码"></a>话不多说，看代码</h2><p>基于RxJS6</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 轮询检查订单状态</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> orderCode 订单号</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> state 订单状态</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">import</span> &#123; interval, <span class="title class_">Observable</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;rxjs&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; map, takeWhile, exhaustMap, filter, take &#125; <span class="keyword">from</span> <span class="string">&#x27;rxjs/operators&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">pollingCheckOrderState</span>(<span class="params">orderCode: string, state: OrderState</span>): <span class="title class_">Observable</span>&lt;<span class="title class_">IResponse</span>&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="variable constant_">MAX_TIME</span> = <span class="number">30</span></span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">interval</span>(<span class="number">1000</span>).<span class="title function_">pipe</span>(</span><br><span class="line">    <span class="title function_">map</span>(<span class="function"><span class="params">x</span> =&gt;</span> x + <span class="number">1</span>), <span class="comment">// 记录定时器次数</span></span><br><span class="line">    <span class="title function_">takeWhile</span>(<span class="function"><span class="params">x</span> =&gt;</span> x &lt;= <span class="variable constant_">MAX_TIME</span>), <span class="comment">// 小于最大次数时流会继续</span></span><br><span class="line">    <span class="title function_">exhaustMap</span>(<span class="function">() =&gt;</span> <span class="title function_">findOrder</span>(orderCode)), <span class="comment">// 转换到下一个流，但是如果之前一个请求没结束，则取消这次请求</span></span><br><span class="line">    <span class="title function_">filter</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123; <span class="comment">// 过滤出符合条件的情况</span></span><br><span class="line">      <span class="keyword">const</span> &#123; <span class="attr">obj</span>: &#123; orderState &#125; &#125; = res</span><br><span class="line">      <span class="keyword">return</span> res.<span class="property">code</span> === <span class="title class_">HttpFlag</span>.<span class="property">SUCCESS</span> &amp;&amp; orderState === state</span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="title function_">take</span>(<span class="number">1</span>) <span class="comment">// 满足一次即退出</span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>目前能立马解决项目里的难题就是轮询事件了。</p><p>这是一个轮询检查订单状态的例子：</p><p><code>最多30次轮询，每次轮询间隔1s，如果满足条件就取消轮询，并进行后续操作。</code></p><p>以往情况，针对多种条件，取消轮询需要取消定时器对象，就需要在多个地方调用清除，更细节化则要处理HTTP请求节流问题，显得十分繁琐。</p><p>此时正是RxJS的用武之地。</p><h2 id="畅想"><a href="#畅想" class="headerlink" title="畅想"></a>畅想</h2><p>后期会把项目中的React Class逐步迭代到React Hooks，并将HTTP Request由RxJs包装，状态管理也托付给RxJS处理。将会显得更优雅。</p><p>不过有一说一，RxJS的学习起初有点难以理解，这对项目内没有接触过的成员来说，上手难度偏高。但是通过Angular对RxJS的青睐有加可以看出，它是足够优秀的。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;让你自由操控「异步事件流」。&lt;/p&gt;</summary>
    
    
    
    
    <category term="rxjs" scheme="https://www.vatery.com/tags/rxjs/"/>
    
    <category term="javascript" scheme="https://www.vatery.com/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>Laravel同时生成Logstash格式日志</title>
    <link href="https://www.vatery.com/2020/01/31/Laravel%E5%90%8C%E6%97%B6%E7%94%9F%E6%88%90Logstash%E6%A0%BC%E5%BC%8F%E6%97%A5%E5%BF%97/"/>
    <id>https://www.vatery.com/2020/01/31/Laravel%E5%90%8C%E6%97%B6%E7%94%9F%E6%88%90Logstash%E6%A0%BC%E5%BC%8F%E6%97%A5%E5%BF%97/</id>
    <published>2020-01-31T14:39:15.000Z</published>
    <updated>2024-06-08T10:16:37.702Z</updated>
    
    <content type="html"><![CDATA[<p>如果你需要将Laravel的日志倒入ELK进行统计查看，就会发现默认的日志格式并不能被Logstash认识，你需要进行各种正则判断，参数转换。如果你使用的是Laravel5.6以上版本，那么恭喜，有非常优雅的方案通过配置即可完成。</p><span id="more"></span><p>这里主要用到<code>channels</code>的方案，通过再自定义话配置一种日志记录方式来实现。</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>使用<code>stack</code> channel搭配，生成默认的日志和一份json形式的日志。</p><p>josn形式的日志通过<strong>monolog</strong>提供的方法实现。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>File: <code>config/logging.php</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;channels&#x27;</span> =&gt; [</span><br><span class="line">  <span class="string">&#x27;stack&#x27;</span> =&gt; [</span><br><span class="line">      <span class="string">&#x27;driver&#x27;</span> =&gt; <span class="string">&#x27;stack&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;channels&#x27;</span> =&gt; [<span class="string">&#x27;daliy&#x27;</span>, <span class="string">&#x27;logstash&#x27;</span>], <span class="comment">// channel的组合</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="string">&#x27;logstash&#x27;</span> =&gt; [</span><br><span class="line">      <span class="string">&#x27;driver&#x27;</span> =&gt; <span class="string">&#x27;monolog&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;level&#x27;</span> =&gt; <span class="string">&#x27;debug&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;handler&#x27;</span> =&gt; <span class="title class_">Monolog\Handler\RotatingFileHandler</span>::<span class="variable language_">class</span>,</span><br><span class="line">      <span class="string">&#x27;formatter&#x27;</span> =&gt; <span class="title class_">Monolog\Formatter\LogstashFormatter</span>::<span class="variable language_">class</span>,</span><br><span class="line">      <span class="string">&#x27;with&#x27;</span> =&gt; [</span><br><span class="line">          <span class="string">&#x27;filename&#x27;</span> =&gt; <span class="title function_ invoke__">storage_path</span>(<span class="string">&#x27;jsonlogs/laravel.log&#x27;</span>), <span class="comment">// 自定义文件存放路径</span></span><br><span class="line">          <span class="string">&#x27;maxFiles&#x27;</span> =&gt; <span class="number">14</span> <span class="comment">// 自定义最大文件保存数目</span></span><br><span class="line">      ],</span><br><span class="line">      <span class="string">&#x27;formatter_with&#x27;</span> =&gt; [</span><br><span class="line">          <span class="string">&#x27;applicationName&#x27;</span> =&gt; <span class="title function_ invoke__">env</span>(<span class="string">&#x27;APP_NAME&#x27;</span>), <span class="comment">// 自定义应用名称</span></span><br><span class="line">      ]</span><br><span class="line">  ],</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>这里看到使用<code>handler</code> 和<code>formatter</code>来搭配进行日志的处理和格式化。</p><p>其中Monolog默认库里提供可选用的有很多，具体看<a href="https://github.com/Seldaek/monolog/blob/master/doc/02-handlers-formatters-processors.md">文档</a>。</p><p>另外需要注意的则是<code>with</code> 和<code>formatter_with</code>两个参数，这是为<code>handler</code>和<code>formatter</code>分别实例化提供必要参数的方式，具体提供哪些必要参数可以查看Class的代码。</p><p>这样，就可以使用<strong>Filebeat</strong>来检测<code>jsonlogs/*.log</code>并上传到ELK中分析。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;如果你需要将Laravel的日志倒入ELK进行统计查看，就会发现默认的日志格式并不能被Logstash认识，你需要进行各种正则判断，参数转换。如果你使用的是Laravel5.6以上版本，那么恭喜，有非常优雅的方案通过配置即可完成。&lt;/p&gt;</summary>
    
    
    
    
    <category term="laravel" scheme="https://www.vatery.com/tags/laravel/"/>
    
  </entry>
  
  <entry>
    <title>在Esxi上安装群晖系统</title>
    <link href="https://www.vatery.com/2019/12/05/%E5%9C%A8Esxi%E4%B8%8A%E5%AE%89%E8%A3%85%E7%BE%A4%E6%99%96%E7%B3%BB%E7%BB%9F/"/>
    <id>https://www.vatery.com/2019/12/05/%E5%9C%A8Esxi%E4%B8%8A%E5%AE%89%E8%A3%85%E7%BE%A4%E6%99%96%E7%B3%BB%E7%BB%9F/</id>
    <published>2019-12-05T04:00:00.000Z</published>
    <updated>2024-06-08T10:16:37.702Z</updated>
    
    <content type="html"><![CDATA[<p>如果你想要一台高性能的NAS机器，但是又迫于经费不足；再或者不满于群晖的高价低配，那这里还有一种选择…</p><span id="more"></span><blockquote><p>本文大部分内容来自于一篇英文博客，本人完整测试通过。</p><p>参考原文：<a href="https://xpenology.com/forum/topic/13061-tutorial-install-dsm-62-on-esxi-67/">https://xpenology.com/forum/topic/13061-tutorial-install-dsm-62-on-esxi-67/</a></p></blockquote><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>设想：在Esxi中安装群晖系统，进行下载影视资料，运行Plex服务等；而白群晖的NAS机器受于其来自官方的支持，以及稳定低功耗的特性来运行照片、文档重要资料的备份。</p><h2 id="Esxi-Synology实战"><a href="#Esxi-Synology实战" class="headerlink" title="Esxi + Synology实战"></a>Esxi + Synology实战</h2><h3 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h3><ul><li>Esxi: 6.7</li><li>Synology: <a href="https://c-t.work/s/80c2be3ddc8246">DSM_DS3615</a></li><li>Client: macOS 10.15.1 with Firefox 70.0.1</li></ul><blockquote><p>无需使用windows转换软件，将img转换为Esxi专用文件</p></blockquote><h3 id="操作过程"><a href="#操作过程" class="headerlink" title="操作过程"></a>操作过程</h3><ol><li><p>下载DSM系统引导文件和安装文件<a href="https://c-t.work/s/80c2be3ddc8246">DSM_DS3615</a>（解压后包括：<code>synoboot.vmdk</code>，<code>synoboot.img</code>，<code>DSM_DS3615xs_15266.pat</code>）</p></li><li><p>将压缩文件解压，并把<code>synoboot.vmdk</code>和<code>synoboot.img</code>上传到Esxi的存储中</p></li><li><p>登录Esxi创建一个虚拟机</p><p><img src="https://xpenology.com/forum/uploads/monthly_2018_08/image.png.6e989b3218e3cc1587a25cfe9be84d0f.png"></p></li><li><p>输入创建的类型及名称</p><p><img src="https://xpenology.com/forum/uploads/monthly_2019_06/obraz.thumb.png.66a3ae1d509e572156d772f7fbe0d253.png"></p></li><li><p>重点在这一步</p><p><img src="https://xpenology.com/forum/uploads/monthly_2018_08/image.thumb.png.315e05a08ae9679b5da7b6e84852d284.png"></p><h4 id="需要删除的"><a href="#需要删除的" class="headerlink" title="需要删除的"></a>需要删除的</h4><ul><li>删除 <strong>SCSI控制器</strong></li><li>删除 <strong>默认硬盘</strong></li><li>删除 <strong>CD&#x2F;DVD光驱</strong></li><li>删除 <strong>USB控制器</strong></li></ul><h4 id="需要调整的"><a href="#需要调整的" class="headerlink" title="需要调整的"></a>需要调整的</h4><ul><li>调整 <strong>CPU</strong>核心数（推荐1核以上）</li><li>调整 <strong>内存</strong>容量（推荐2G以上）</li><li>点开 <strong>网卡适配器</strong>，将适配器类型改为<code>E1000e</code>（如果不修改，将无法启动网络，局域网内无法发现DSM安装程序）</li></ul><h4 id="需要添加的"><a href="#需要添加的" class="headerlink" title="需要添加的"></a>需要添加的</h4><ul><li>添加其他设备，选择 <strong>SATA controller</strong></li></ul><p>点击「下一步」，然后点击「完成」。</p></li><li><p>让我们稍作休息，后边就是配置引导盘和系统安装盘的操作。</p></li><li><p>再次打开编辑该虚拟机配置</p><ul><li>添加硬盘（用于引导盘），选择「现有硬盘」，找到之前上传的<code>synoboot.vmdk</code>文件并选择；点开左侧小箭头，选择「虚拟设备节点」，确定为<code>SATA contoller 0</code>和<code>SATA(0:0)</code><img src="https://xpenology.com/forum/uploads/monthly_2018_08/image.thumb.png.aff0e1988324bb515e12db6e105178e8.png"></li><li>添加硬盘（用于系统安装挂载），选择「全新的硬盘」，分配容量（推荐20G以上）；点开左侧小箭头，同样选择「虚拟设备节点」，确定为<code>SATA controller 1</code>和<code>SATA(1:0)</code><img src="https://xpenology.com/forum/uploads/monthly_2018_08/image.thumb.png.98d57dec673ec56600679b0e9919f63c.png"></li><li>保存</li></ul></li><li><p>开机进行设置</p><ul><li>在开机时，终端控制界面会有一闪而过的启动选择项，所以在开机的一刻需要立马疯狂点击按键盘上方向「下箭头」（相信爱折腾的你单身多年是有这个手速的）</li><li>选择Esxi&#x2F;VMware专用启动</li><li>显示该图则成功<img src="https://xpenology.com/forum/uploads/monthly_2018_08/image.thumb.png.b581d3da08dc2ba7504142719c223ddd.png"></li></ul></li><li><p>等待1分钟左右，在浏览器输入<a href="http://find.synology.com/">http://find.synology.com</a>，即会在局域网内进行搜索正在运行的群晖系统</p></li><li><p>没有问题的话就应该是这样<img src="https://xpenology.com/forum/uploads/monthly_2019_06/obraz.thumb.png.0ceec8eaa3debd80d46c4dceef33291d.png"></p></li><li><p>安装</p><ul><li><p><img src="https://xpenology.com/forum/uploads/monthly_2019_06/obraz.png.b22a7f749cc2280ca9ed5252797be19a.png"></p></li><li><p>需要选择手动安装<img src="https://xpenology.com/forum/uploads/monthly_2019_06/obraz.thumb.png.5a360438a4a0ce42dd3dca2283b11152.png"></p></li><li><p>将解压后的包内<code>DSM_DS3615xs_15266.pat</code>进行上传<img src="https://xpenology.com/forum/uploads/monthly_2019_06/obraz.thumb.png.7dfff1d1a8a74abd588ff513e1f4c273.png"></p></li></ul></li><li><p>静静等待<img src="https://xpenology.com/forum/uploads/monthly_2019_06/obraz.thumb.png.5bb4cb5f1d4603468dcd7f63f0077ee3.png"></p></li><li><p>设置必要信息<img src="https://xpenology.com/forum/uploads/monthly_2019_06/obraz.png.4449788f9ec2a5d869efe1932fd73c8a.png"></p></li><li><p>跳过<code>QuickConnect</code>设置（因为这是非官方注册设备的原因无法启用）<img src="https://xpenology.com/forum/uploads/monthly_2019_06/obraz.png.c4c295281eddb0dc047f405db00c1c3f.png"></p></li><li><p>全部完成<img src="https://xpenology.com/forum/uploads/monthly_2019_06/obraz.thumb.png.703c3b3470af4e32331b7207ea710dd7.png"></p></li></ol><blockquote><p>P.S. 完成后，不妨给你的虚拟机建立一个快照，防止玩坏翻车了还要重来。🤪</p></blockquote>]]></content>
    
    
    <summary type="html">&lt;p&gt;如果你想要一台高性能的NAS机器，但是又迫于经费不足；再或者不满于群晖的高价低配，那这里还有一种选择…&lt;/p&gt;</summary>
    
    
    
    
    <category term="synology" scheme="https://www.vatery.com/tags/synology/"/>
    
    <category term="esxi" scheme="https://www.vatery.com/tags/esxi/"/>
    
    <category term="nas" scheme="https://www.vatery.com/tags/nas/"/>
    
  </entry>
  
</feed>
