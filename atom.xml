<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>王豆豆的人生旅途</title>
  
  <subtitle>vogan&#39;s blog</subtitle>
  <link href="https://www.vatery.com/atom.xml" rel="self"/>
  
  <link href="https://www.vatery.com/"/>
  <updated>2023-01-09T15:42:51.595Z</updated>
  <id>https://www.vatery.com/</id>
  
  <author>
    <name>Vogan</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>RxJS初体验</title>
    <link href="https://www.vatery.com/2023/01/09/RxJS%E5%88%9D%E4%BD%93%E9%AA%8C/"/>
    <id>https://www.vatery.com/2023/01/09/RxJS%E5%88%9D%E4%BD%93%E9%AA%8C/</id>
    <published>2023-01-09T15:42:51.595Z</published>
    <updated>2023-01-09T15:42:51.595Z</updated>
    
    <content type="html"><![CDATA[<p>让你自由操控「异步事件流」。</p><span id="more"></span><p><em>接触RxJS有一段时间了，也看过很多demo和视频，但是至于怎么运用到自己项目，该替换现有的哪一个模块，还是无从下手。</em></p><h2 id="流"><a href="#流" class="headerlink" title="流"></a>流</h2><p>这是个抽象的话题，但是白话讲：就是一件事情，而且这个事情是复杂的，有流程的。</p><p>例如：点击一个按钮 -&gt; 发出一个请求 -&gt; 根据返回判断是否需要继续轮询 -&gt; 或者结束弹出提示框。</p><p>这种情况，RxJS是适用的。</p><h2 id="话不多说，看代码"><a href="#话不多说，看代码" class="headerlink" title="话不多说，看代码"></a>话不多说，看代码</h2><p>基于RxJS6</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 轮询检查订单状态</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> orderCode 订单号</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> state 订单状态</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">import</span> &#123; interval, <span class="title class_">Observable</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;rxjs&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; map, takeWhile, exhaustMap, filter, take &#125; <span class="keyword">from</span> <span class="string">&#x27;rxjs/operators&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">pollingCheckOrderState</span>(<span class="params">orderCode: string, state: OrderState</span>): <span class="title class_">Observable</span>&lt;<span class="title class_">IResponse</span>&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="variable constant_">MAX_TIME</span> = <span class="number">30</span></span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">interval</span>(<span class="number">1000</span>).<span class="title function_">pipe</span>(</span><br><span class="line">    <span class="title function_">map</span>(<span class="function"><span class="params">x</span> =&gt;</span> x + <span class="number">1</span>), <span class="comment">// 记录定时器次数</span></span><br><span class="line">    <span class="title function_">takeWhile</span>(<span class="function"><span class="params">x</span> =&gt;</span> x &lt;= <span class="variable constant_">MAX_TIME</span>), <span class="comment">// 小于最大次数时流会继续</span></span><br><span class="line">    <span class="title function_">exhaustMap</span>(<span class="function">() =&gt;</span> <span class="title function_">findOrder</span>(orderCode)), <span class="comment">// 转换到下一个流，但是如果之前一个请求没结束，则取消这次请求</span></span><br><span class="line">    <span class="title function_">filter</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123; <span class="comment">// 过滤出符合条件的情况</span></span><br><span class="line">      <span class="keyword">const</span> &#123; <span class="attr">obj</span>: &#123; orderState &#125; &#125; = res</span><br><span class="line">      <span class="keyword">return</span> res.<span class="property">code</span> === <span class="title class_">HttpFlag</span>.<span class="property">SUCCESS</span> &amp;&amp; orderState === state</span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="title function_">take</span>(<span class="number">1</span>) <span class="comment">// 满足一次即退出</span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>目前能立马解决项目里的难题就是轮询事件了。</p><p>这是一个轮询检查订单状态的例子：</p><p><code>最多30次轮询，每次轮询间隔1s，如果满足条件就取消轮询，并进行后续操作。</code></p><p>以往情况，针对多种条件，取消轮询需要取消定时器对象，就需要在多个地方调用清除，更细节化则要处理HTTP请求节流问题，显得十分繁琐。</p><p>此时正是RxJS的用武之地。</p><h2 id="畅想"><a href="#畅想" class="headerlink" title="畅想"></a>畅想</h2><p>后期会把项目中的React Class逐步迭代到React Hooks，并将HTTP Request由RxJs包装，状态管理也托付给RxJS处理。将会显得更优雅。</p><p>不过有一说一，RxJS的学习起初有点难以理解，这对项目内没有接触过的成员来说，上手难度偏高。但是通过Angular对RxJS的青睐有加可以看出，它是足够优秀的。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;让你自由操控「异步事件流」。&lt;/p&gt;</summary>
    
    
    
    
    <category term="rxjs,js" scheme="https://www.vatery.com/tags/rxjs-js/"/>
    
  </entry>
  
  <entry>
    <title>2023年度计划</title>
    <link href="https://www.vatery.com/2023/01/02/2023%E5%B9%B4%E5%BA%A6%E8%AE%A1%E5%88%92/"/>
    <id>https://www.vatery.com/2023/01/02/2023%E5%B9%B4%E5%BA%A6%E8%AE%A1%E5%88%92/</id>
    <published>2023-01-02T05:22:10.000Z</published>
    <updated>2023-01-09T15:42:51.595Z</updated>
    
    <content type="html"><![CDATA[<p>新的一年以年度计划开篇是顶好的。</p><span id="more"></span><p><img src="https://vip2.loli.io/2023/01/02/jkEvdXOIseBfut2.jpg" alt="ian-schneider-PAykYb-8Er8-unsplash.jpg"></p><h2 id="💰理财"><a href="#💰理财" class="headerlink" title="💰理财"></a>💰理财</h2><p>系统学习金融理财知识，而不是人云亦云地进行赌博。</p><p>暂时想到：</p><ul><li>如何读财报</li><li>调研分析公司背景、管理人员</li><li>宏观形势分析</li></ul><h2 id="👨‍💻技术"><a href="#👨‍💻技术" class="headerlink" title="👨‍💻技术"></a>👨‍💻技术</h2><p>首要的目标是学习swiftUI。能够独立开发简单的iOS/macOS程序。</p><p>其次可以深入了解Rust语言，以及附带使用Python。</p><p>Rust是一种极强大且具有表现力的现代后端语言，深入的了解能够增进对各类编程语言以及计算机系统的学习。</p><p>Python则是一门脚本型语言，它更多表现在便利的工具性方面，提高工作生活的效率，并不需要特别深入用作开发项目。</p><h2 id="📖读书"><a href="#📖读书" class="headerlink" title="📖读书"></a>📖读书</h2><p>输入是必不可少的。<br>至少要做到每天30分钟的阅读。</p><p>书单：</p><ul><li>美丽新世界</li><li>卡片笔记写作法</li><li>别独自用餐</li><li>微习惯</li></ul><h2 id="✍️博客"><a href="#✍️博客" class="headerlink" title="✍️博客"></a>✍️博客</h2><p>在输入的同时，需搭配输出。输出也是一种思考，可以用作复盘和反思。<br>约定在2023年24篇文章的产出（基本每月2篇）。<br>灵感来源可以是读书/文章，Ted演讲等等。</p><h2 id="🏄‍♂️健身"><a href="#🏄‍♂️健身" class="headerlink" title="🏄‍♂️健身"></a>🏄‍♂️健身</h2><p>身体强健是万事之本。<br>我本身不爱运动，但是也深知健康体魄之重要性。<br>所以强制要求自己进行一定训练。<br>每周进行2次有氧运动。</p><p>与君共勉！</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;新的一年以年度计划开篇是顶好的。&lt;/p&gt;</summary>
    
    
    
    
    <category term="2023,plan" scheme="https://www.vatery.com/tags/2023-plan/"/>
    
  </entry>
  
  <entry>
    <title>增加对生活的控制</title>
    <link href="https://www.vatery.com/2022/12/17/%E5%A2%9E%E5%8A%A0%E5%AF%B9%E7%94%9F%E6%B4%BB%E7%9A%84%E6%8E%A7%E5%88%B6/"/>
    <id>https://www.vatery.com/2022/12/17/%E5%A2%9E%E5%8A%A0%E5%AF%B9%E7%94%9F%E6%B4%BB%E7%9A%84%E6%8E%A7%E5%88%B6/</id>
    <published>2022-12-17T07:09:04.000Z</published>
    <updated>2023-01-09T15:42:51.595Z</updated>
    
    <content type="html"><![CDATA[<p>以前以为只是自己还小，不懂生活的残酷，无忧无虑。现在长大了，才知道活着有多累。但是情况真的只能这么糟糕吗？<br>直到我发现了生活的真谛…</p><span id="more"></span><h2 id="反思"><a href="#反思" class="headerlink" title="反思"></a>反思</h2><p>「增加对生活的控制」表明我以前生活的诸多问题：</p><ul><li>对待事务的起因没有兴趣</li><li>对待事务的过程不够认真</li><li>对待事务结果是无所谓的态度</li></ul><p>最后整件事有很多种结果，普通较多、糟糕也有，满意的却很少。<br>自己能有什么收获呢，能有什么成长呢？</p><p>我需要改变！</p><h2 id="领悟"><a href="#领悟" class="headerlink" title="领悟"></a>领悟</h2><p>这个概念看似简单明了，也是我在厨房做菜的时候突然领悟的。</p><p>我刚开始学做饭的时候，手忙脚乱，弄的厨房一团糟。后来看网络视频学习做菜，发现做出可食用的、口味过得去的饭菜，也没有那么复杂。<br>但过程总是很狼狈，觉得做饭菜又脏又累。</p><p>我慢慢注意一些大厨的细节，看到他们对每一项步骤都有很强的把控。例如有一块干净的经常叠整齐放在手边；下锅的酱料提前在碗中按量备好，防止调味不及等等。</p><p>用便签纸记录下冰箱里还剩的食材；通过家里有的食材安排今晚的菜单，复杂的、新式的菜肴都会记录好大概步骤用便签纸贴在油烟机上；安排做菜的顺序，同时锅里煮的时候，清洗下一道菜的食料。</p><p>等很多东西都被自己精心设计、编排过后，发现复杂的事情变简单了。</p><h2 id="进步"><a href="#进步" class="headerlink" title="进步"></a>进步</h2><p>以下都是对生活增加控制的一些小方法：</p><h3 id="记录"><a href="#记录" class="headerlink" title="记录"></a>记录</h3><p>使用<strong>纸和笔</strong>记录。</p><p>我发现现在的我（30岁）记忆如同80的爷爷得了老年痴呆一般，10分钟前想起的念头，转眼就忘记。其实也不必太担心。现在生活被信息流充斥，并不是大家的脑力不行，而是根本装不下那么多东西，很多时候是被无用的信息占据。</p><p>抛弃电子化记录。因为电子化记录完成之后，对我来说很难有机会再打开进行回顾。过两年那份文档都不知道去了哪里。纸质材料积累到一定程度，发现有许多时内心会很有成就感。甚至有时胡一乱想，觉着写一本书也没多难嘛🤣。</p><p>记录本身很重要，还有一个同样举足轻重的点就在于<strong>回顾复盘</strong>。</p><h3 id="便签纸"><a href="#便签纸" class="headerlink" title="便签纸"></a>便签纸</h3><p>这是记录的一种实体化方式。</p><p>以前的我不以为然，现在深知这是多么伟大的一项发明！<br>便签纸可以贴在任意的地方，比如冰箱、纸箱、电脑屏幕边等等。很多时候就不需要再进行检查盒子<em>（包括脑袋）</em>里的东西，一目了然。</p><p>重要事项我会写下便签纸贴在电脑屏幕边，怎么样都不会遗落了。<br>当然电脑里的ToDo同样会记录一份，统一管理。</p><p>所以开始使用便签纸吧，释放自己的大脑空间！</p><h3 id="定时"><a href="#定时" class="headerlink" title="定时"></a>定时</h3><p>设定一个时间点做什么事。</p><p>把任务的截止时间明确化，也明确了任务本身和其重要性。<br>人都有拖沓的症状，但是很多事情早做比晚做在结果上有很大差别。</p><p>催促自己去做事，自己推动生活。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;以前以为只是自己还小，不懂生活的残酷，无忧无虑。现在长大了，才知道活着有多累。但是情况真的只能这么糟糕吗？&lt;br&gt;直到我发现了生活的真谛…&lt;/p&gt;</summary>
    
    
    
    
    <category term="life" scheme="https://www.vatery.com/tags/life/"/>
    
  </entry>
  
  <entry>
    <title>Taro开发小程序的经验</title>
    <link href="https://www.vatery.com/2021/05/07/Taro%E5%BC%80%E5%8F%91%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%9A%84%E7%BB%8F%E9%AA%8C/"/>
    <id>https://www.vatery.com/2021/05/07/Taro%E5%BC%80%E5%8F%91%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%9A%84%E7%BB%8F%E9%AA%8C/</id>
    <published>2021-05-07T08:28:16.000Z</published>
    <updated>2023-01-09T15:42:51.595Z</updated>
    
    <content type="html"><![CDATA[<p>Taro 从2的不完善到3的大版本更新，从底层优化加快的编译兼容性和速度，但是也发生了很多的变化。这里总结了Taro不同版本的开发经验。</p><span id="more"></span><h2 id="版本"><a href="#版本" class="headerlink" title="版本"></a>版本</h2><p>Taro的版本更新还是很快的，但是一个大问题是，向下兼容性堪忧。</p><p>例如3与2的版本是完全不兼容，如果要升级，也是比较麻烦的，难以做到平滑升级。</p><p>在前端项目组有多个小程序项目的情况下，使用不同Taro版本开发，特别需要注意CLI的版本会直接影响项目启动，不推荐使用全局安装CLI，而是安装到项目本地里面。</p><h2 id="稳定性"><a href="#稳定性" class="headerlink" title="稳定性"></a>稳定性</h2><p>Taro的稳定性也较差，在新版本发布后可能会引入BUG，直接影响项目开发编译。</p><h2 id="Taro-UI"><a href="#Taro-UI" class="headerlink" title="Taro UI"></a>Taro UI</h2><p>Taro UI的开发与Taro是分开的，具体表现出的问题是，Taro3.0已经发布，但是长时间Taro UI仍然是2.x，导致项目框架升级，却因为Taro UI不能运行，而只能降级！<br>所以推荐各位使用第三方组件或者自己开发封装，而避免版本依赖。</p><h2 id="小程序开发工具"><a href="#小程序开发工具" class="headerlink" title="小程序开发工具"></a>小程序开发工具</h2><p>小程序的开发工具更新也较频繁，但是每次更新后的表现都比较诡异。通常需要重新打开，进行重新编译。</p><p>有时GitHub的issue分析不出原因，很多开发者将问题怪罪于小程序开发工具。</p><p>只能说这两个都不稳定。</p><h2 id="生态"><a href="#生态" class="headerlink" title="生态"></a>生态</h2><p>Taro的生态并不好，尤其论坛里，存在好多问题，但是没有管理员或者热心开发者进行解答。</p><p>而GitHub的issue里，bot出现干预过多，项目贡献者回复、解答就比较少，也不够详细，经常没有结论就被bot关闭。</p><h2 id="地图"><a href="#地图" class="headerlink" title="地图"></a>地图</h2><p>微信小程序的地图由于其封闭性，只能使用自带的Map组件，引擎是腾讯地图，功能操作部分并没有那么友好。比如，没有自动规划路径、计算距离等等。需要实现这些功能，则需要额外引入腾讯地图的jssdk。</p><p>这里有个坑，个人默认用量是1万次调用/天，企业账号默认也是相同，导致测试时一切正常，等正式上线会出现调用次数超出限制的报错。</p><p>企业账号可以免费申请额度到更高，但是需要提交工单，比如：逆地址解析（通过经纬度查询地址城市街道等信息）可以申请到300万调用/天。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Taro 从2的不完善到3的大版本更新，从底层优化加快的编译兼容性和速度，但是也发生了很多的变化。这里总结了Taro不同版本的开发经验。&lt;/p&gt;</summary>
    
    
    
    
    <category term="Taro" scheme="https://www.vatery.com/tags/Taro/"/>
    
  </entry>
  
  <entry>
    <title>Vue大型项目的探索</title>
    <link href="https://www.vatery.com/2021/04/12/Vue%E5%A4%A7%E5%9E%8B%E9%A1%B9%E7%9B%AE%E7%9A%84%E6%8E%A2%E7%B4%A2/"/>
    <id>https://www.vatery.com/2021/04/12/Vue%E5%A4%A7%E5%9E%8B%E9%A1%B9%E7%9B%AE%E7%9A%84%E6%8E%A2%E7%B4%A2/</id>
    <published>2021-04-12T07:46:32.000Z</published>
    <updated>2023-01-09T15:42:51.595Z</updated>
    
    <content type="html"><![CDATA[<p>当一个 Vue 项目源文件达到 400 以上时，发现开发起来已经显得有些臃肿，本文就在多个方面进行一些模块化的尝试。</p><span id="more"></span><h2 id="更低程度的模块化"><a href="#更低程度的模块化" class="headerlink" title="更低程度的模块化"></a>更低程度的模块化</h2><p>通常 CLI 生成的项目结构都比较简单，易于上手。一般来说都会安装 Vuex、Vue Router 包进行配合开发，他们的默认结构大体是这样的：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">├── App.vue</span><br><span class="line">├── assets</span><br><span class="line">├── main.js</span><br><span class="line">├── pages</span><br><span class="line">├── router</span><br><span class="line">└── store</span><br></pre></td></tr></table></figure><p>在小型项目中，开发完全没有问题，即使大型项目也是可以继续开发的，但是我们会发现一些问题，比如：</p><ul><li>router 中的 router.js 路由文件越来越大，十分复杂</li><li>store 中管理非常多的状态，混乱度增加</li><li>pages 主要业务文件夹中，页面列表越来越长，业务内聚力差</li></ul><p>在业务成长一定程度后，基调必定会确定下来，通过分析思考，我们可以在业务里提取出模块。例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">├── App.vue</span><br><span class="line">├── assets</span><br><span class="line">├── main.js</span><br><span class="line">├── modules # 原pages</span><br><span class="line">│   ├── Business</span><br><span class="line">│   ├── Device</span><br><span class="line">│   ├── Search</span><br><span class="line">│   └── ...</span><br><span class="line">├── router</span><br><span class="line">└── store</span><br></pre></td></tr></table></figure><p>在此基础上，将 router 和 store 的配置，下放到每一个 module 去。这样主目录下的 router 和 store 都会变得比较简单。而在每个 module 中，router 和 store 都更密切的关联该模块。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">├── App.vue</span><br><span class="line">├── assets</span><br><span class="line">├── main.js</span><br><span class="line">├── modules # 原pages</span><br><span class="line">│   ├── Business</span><br><span class="line">│   │     ├── pages</span><br><span class="line">│   │     ├── index.js</span><br><span class="line">│   │     ├── router.js</span><br><span class="line">│   │     └── store.js</span><br><span class="line">│   ├── Device</span><br><span class="line">│   ├── Search</span><br><span class="line">│   └── ...</span><br><span class="line">├── router</span><br><span class="line">└── store</span><br></pre></td></tr></table></figure><h2 id="视图、业务逻辑分离"><a href="#视图、业务逻辑分离" class="headerlink" title="视图、业务逻辑分离"></a>视图、业务逻辑分离</h2><p>Vue 快速开发的特色之一，就是在单一的一个 vue 文件中，可以写入 template、js 和 css，开发者不需要切换多个页面。但是在大型的表单类页面中，需求上设计的就非常复杂，不考虑各种优化的情况下，页面代码量可能达到 1000 行以上，在这种页面中进行修改和增加新的代码极容易出现问题。</p><p>当然，解决方案之一是组件化，但是对于表单来说，整个表单就是多个组件组合而成，而且本身表单组件也复杂，所以组件化只能解决部分问题。</p><p>这里我提出的方案，灵感来自于 AngularJS 的文件结构和 Vue Router 中的<code>mapActions</code>方法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">user</span><br><span class="line">├── index.vue</span><br><span class="line">└── index.service.js</span><br></pre></td></tr></table></figure><p>将部分复杂的逻辑，抽取到<code>index.service.js</code>中，如何引入到<code>index.vue</code>中呢？</p><p>非常简单：</p><p>File: <code>index.vue</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- ... --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tempate</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> mapServices <span class="keyword">from</span> <span class="string">&#x27;@/utils/service.js&#x27;</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> service <span class="keyword">from</span> <span class="string">&#x27;./index.service.js&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">created</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">this</span>.<span class="title function_">fetchData</span>() <span class="comment">// 直接调用map进来的方法</span></span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">    ...<span class="title function_">mapServices</span>(service)([</span></span><br><span class="line"><span class="language-javascript">      <span class="string">&#x27;login&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="string">&#x27;logout&#x27;</span></span></span><br><span class="line"><span class="language-javascript">      <span class="string">&#x27;register&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="string">&#x27;fetchData&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    ])</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>File: <code>index.service.js</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">login</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">logout</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">register</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fetchData</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  login,</span><br><span class="line">  logout,</span><br><span class="line">  register,</span><br><span class="line">  fetchData,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>File: <code>@/utils/service.js</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">mapServices</span>(<span class="params">services</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (!services) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;&#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="function">(<span class="params">props</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="title class_">Array</span>.<span class="title function_">isArray</span>(props)) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;mapServices only accept an Array&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> funcs = &#123;&#125;;</span><br><span class="line">    props.<span class="title function_">forEach</span>(<span class="function">(<span class="params">propName</span>) =&gt;</span> &#123;</span><br><span class="line">      services[propName] &amp;&amp; (funcs[propName] = services[propName]);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> funcs;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种方式即可将逻辑分散到其他文件中，并在 vue 主文件中，也不失关联性的，能够自然开发。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;当一个 Vue 项目源文件达到 400 以上时，发现开发起来已经显得有些臃肿，本文就在多个方面进行一些模块化的尝试。&lt;/p&gt;</summary>
    
    
    
    
    <category term="Vue,javascript" scheme="https://www.vatery.com/tags/Vue-javascript/"/>
    
  </entry>
  
  <entry>
    <title>Create-React-App创建的项目进行多页面构建</title>
    <link href="https://www.vatery.com/2020/09/08/Create-React-App-Multi-Entry-Points/"/>
    <id>https://www.vatery.com/2020/09/08/Create-React-App-Multi-Entry-Points/</id>
    <published>2020-09-08T04:00:00.000Z</published>
    <updated>2023-01-09T15:42:51.595Z</updated>
    
    <content type="html"><![CDATA[<p>一个项目，两个页面，共用组件！没错，就是Multi Entry Point。</p><span id="more"></span><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><ul><li>在一个前端项目中，需要有<code>前台用户</code>和<code>后台管理</code>两个站点</li><li>登录页面设计完全独立，与主界面不一致</li><li>拆分bundle文件，优化项目文件大小</li></ul><p>等等情况都可以使用多个Entry Point解决。</p><p>由于通过<code>create-react-app</code>创建的React项目，webpack的配置是经过封装的。而且官方也说明，不会通过简易方式提供entry point的配置，需要自己对webpack.config.js进行自定义修改。</p><h2 id="方案"><a href="#方案" class="headerlink" title="方案"></a>方案</h2><p>主要参考来自两篇文章</p><ul><li><a href="https://stackoverflow.com/a/61815449">StackOverflow</a></li><li><a href="https://github.com/danvc/create-react-app-multiple-entry-points">Github</a></li></ul><ol><li><p>先通过<code>yarn eject</code> 把webpack的配置文件暴露出来。（曾经试过用craco进行更少副作用的配置，由于自由度不够强大，失败告终）</p></li><li><p><code>/config/paths.js</code> 中添加appPages</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> appPages = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">&quot;name&quot;</span>: <span class="string">&quot;user&quot;</span>,</span><br><span class="line">    <span class="string">&quot;title&quot;</span>: <span class="string">&quot;user&quot;</span>,</span><br><span class="line">    <span class="string">&quot;appHtml&quot;</span>: <span class="string">&quot;public/user.html&quot;</span>, <span class="comment">// 注入的模板文件</span></span><br><span class="line">    <span class="string">&quot;appIndexJs&quot;</span>: <span class="string">&quot;src/pages/User/index&quot;</span> <span class="comment">// 入口文件</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">&quot;name&quot;</span>: <span class="string">&quot;admin&quot;</span>,</span><br><span class="line">    <span class="string">&quot;title&quot;</span>: <span class="string">&quot;admin&quot;</span>,</span><br><span class="line">    <span class="string">&quot;appHtml&quot;</span>: <span class="string">&quot;public/admin.html&quot;</span>, <span class="comment">// 注入的模板文件</span></span><br><span class="line">    <span class="string">&quot;appIndexJs&quot;</span>: <span class="string">&quot;src/pages/Admin/index&quot;</span> <span class="comment">// 入口文件</span></span><br><span class="line">  &#125;</span><br><span class="line">].<span class="title function_">map</span>(<span class="function"><span class="params">p</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    ...p,</span><br><span class="line">    <span class="attr">appHtml</span>: <span class="title function_">resolveApp</span>(p.<span class="property">appHtml</span>), <span class="comment">// 注入的模板文件</span></span><br><span class="line">    <span class="attr">appIndexJs</span>: <span class="title function_">resolveModule</span>(resolveApp, p.<span class="property">appIndexJs</span>) <span class="comment">// 入口文件</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="attr">appPages</span>: appPages <span class="comment">// 暴露出变量</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>webpack.config.js</code> 配置entry points</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> entries = &#123;&#125;;</span><br><span class="line">paths.<span class="property">appPages</span>.<span class="title function_">forEach</span>(<span class="function"><span class="params">appPage</span> =&gt;</span> &#123;</span><br><span class="line">  entries[appPage.<span class="property">name</span>] = [</span><br><span class="line">    isEnvDevelopment &amp;&amp; <span class="built_in">require</span>.<span class="title function_">resolve</span>(<span class="string">&#x27;react-dev-utils/webpackHotDevClient&#x27;</span>),</span><br><span class="line">    appPage.<span class="property">appIndexJs</span>,</span><br><span class="line">  ].<span class="title function_">filter</span>(<span class="title class_">Boolean</span>)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="comment">/* entry: [</span></span><br><span class="line"><span class="comment">      isEnvDevelopment &amp;&amp;</span></span><br><span class="line"><span class="comment">         require.resolve(&#x27;react-dev-utils/webpackHotDevClient&#x27;),</span></span><br><span class="line"><span class="comment">      paths.appIndexJs,</span></span><br><span class="line"><span class="comment">  ].filter(Boolean), */</span></span><br><span class="line">  <span class="attr">entry</span>: entries <span class="comment">// 注释掉默认的，配置webpack的多个entry</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>webpack.config.js</code>配置HtmlPlugin，进行静态页面的注入<srcipt></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> htmlPlugins = []</span><br><span class="line">paths.<span class="property">appPages</span>.<span class="title function_">forEach</span>(<span class="function"><span class="params">appPage</span> =&gt;</span> &#123;</span><br><span class="line">  htmlPlugins.<span class="title function_">push</span>(</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">HtmlWebpackPlugin</span>(</span><br><span class="line">      <span class="title class_">Object</span>.<span class="title function_">assign</span>(</span><br><span class="line">        &#123;&#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">inject</span>: <span class="literal">true</span>,</span><br><span class="line">          <span class="attr">template</span>: appPage.<span class="property">appHtml</span>,</span><br><span class="line">          <span class="attr">filename</span>: <span class="string">`<span class="subst">$&#123;appPage.name&#125;</span>.html`</span>,</span><br><span class="line">          <span class="attr">title</span>: appPage.<span class="property">title</span>,</span><br><span class="line">          <span class="attr">chunks</span>: [appPage.<span class="property">name</span>]</span><br><span class="line">        &#125;,</span><br><span class="line">        isEnvProduction</span><br><span class="line">        ? &#123;</span><br><span class="line">          <span class="attr">minify</span>: &#123;</span><br><span class="line">            <span class="attr">removeComments</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">collapseWhitespace</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">removeRedundantAttributes</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">useShortDoctype</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">removeEmptyAttributes</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">removeStyleLinkTypeAttributes</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">keepClosingSlash</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">minifyJS</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">minifyCSS</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">minifyURLs</span>: <span class="literal">true</span>,</span><br><span class="line">          &#125;,</span><br><span class="line">        &#125;</span><br><span class="line">        : <span class="literal">undefined</span></span><br><span class="line">      )</span><br><span class="line">    )</span><br><span class="line">  )</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="attr">plugins</span>: [</span><br><span class="line">  ...htmlPlugins, <span class="comment">// 填入plugins</span></span><br><span class="line">  <span class="comment">// ...把原来的看需求去留</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure></li><li><p><code>webpack.config.js</code> 更新ManifestPlugin加载新的entry point</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">ManifestPlugin</span>(&#123;</span><br><span class="line">  <span class="attr">fileName</span>: <span class="string">&#x27;asset-manifest.json&#x27;</span>,</span><br><span class="line">  <span class="attr">publicPath</span>: paths.<span class="property">publicUrlOrPath</span>,</span><br><span class="line">  <span class="attr">generate</span>: <span class="function">(<span class="params">seed, files, entrypoints</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> manifestFiles = files.<span class="title function_">reduce</span>(<span class="function">(<span class="params">manifest, file</span>) =&gt;</span> &#123;</span><br><span class="line">      manifest[file.<span class="property">name</span>] = file.<span class="property">path</span>;</span><br><span class="line">      <span class="keyword">return</span> manifest;</span><br><span class="line">    &#125;, seed);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 增加的代码</span></span><br><span class="line">    <span class="keyword">let</span> entrypointFiles = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> [entryFile, fileName] <span class="keyword">of</span> <span class="title class_">Object</span>.<span class="title function_">entries</span>((entrypoints))) &#123;</span><br><span class="line">      <span class="keyword">let</span> notMapFiles = fileName.<span class="title function_">filter</span>(<span class="function"><span class="params">fileName</span> =&gt;</span> !fileName.<span class="title function_">endsWith</span>(<span class="string">&#x27;.map&#x27;</span>));</span><br><span class="line">      entrypointFiles = entrypointFiles.<span class="title function_">concat</span>(notMapFiles);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// const entrypointFiles = entrypoints.main.filter(</span></span><br><span class="line">    <span class="comment">//   fileName =&gt; !fileName.endsWith(&#x27;.map&#x27;)</span></span><br><span class="line">    <span class="comment">// );</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">files</span>: manifestFiles,</span><br><span class="line">      <span class="attr">entrypoints</span>: entrypointFiles,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;),</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p><code>webpack.config.js</code> 最重要的一步，更改生成的js文件名称</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">output</span>: &#123;</span><br><span class="line">  <span class="attr">path</span>: isEnvProduction ? paths.<span class="property">appBuild</span> : <span class="literal">undefined</span>,</span><br><span class="line">    <span class="attr">pathinfo</span>: isEnvDevelopment,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 由bundle.js 改为[name].bundle.js</span></span><br><span class="line">    <span class="attr">filename</span>: isEnvProduction</span><br><span class="line">      ? <span class="string">&#x27;static/js/[name].[contenthash:8].js&#x27;</span></span><br><span class="line">      : isEnvDevelopment &amp;&amp; <span class="string">&#x27;static/js/[name].bundle.js&#x27;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="attr">futureEmitAssets</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">chunkFilename</span>: isEnvProduction</span><br><span class="line">      ? <span class="string">&#x27;static/js/[name].[contenthash:8].chunk.js&#x27;</span></span><br><span class="line">      : isEnvDevelopment &amp;&amp; <span class="string">&#x27;static/js/[name].chunk.js&#x27;</span>,</span><br><span class="line">    <span class="attr">publicPath</span>: paths.<span class="property">publicUrlOrPath</span>,</span><br><span class="line">    <span class="attr">devtoolModuleFilenameTemplate</span>: isEnvProduction</span><br><span class="line">      ? <span class="function"><span class="params">info</span> =&gt;</span></span><br><span class="line">        path</span><br><span class="line">          .<span class="title function_">relative</span>(paths.<span class="property">appSrc</span>, info.<span class="property">absoluteResourcePath</span>)</span><br><span class="line">          .<span class="title function_">replace</span>(<span class="regexp">/\\/g</span>, <span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">      : isEnvDevelopment &amp;&amp;</span><br><span class="line">        (<span class="function"><span class="params">info</span> =&gt;</span> path.<span class="title function_">resolve</span>(info.<span class="property">absoluteResourcePath</span>).<span class="title function_">replace</span>(<span class="regexp">/\\/g</span>, <span class="string">&#x27;/&#x27;</span>)),</span><br><span class="line">      <span class="attr">jsonpFunction</span>: <span class="string">`webpackJsonp<span class="subst">$&#123;appPackageJson.name&#125;</span>`</span>,</span><br><span class="line">      <span class="attr">globalObject</span>: <span class="string">&#x27;this&#x27;</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>现在就能运行访问了。如果你要额外进行路由配置，则在<code>webpackDevServer.config.js</code>中配置historyApiFallback</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">historyApiFallback</span>: &#123;</span><br><span class="line">  <span class="attr">disableDotRule</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">verbose</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">rewrites</span>: [</span><br><span class="line">    &#123; <span class="attr">from</span>: <span class="regexp">/^\/user/</span>, <span class="attr">to</span>: <span class="string">&#x27;/user.html&#x27;</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">from</span>: <span class="regexp">/^\/admin/</span>, <span class="attr">to</span>: <span class="string">&#x27;/admin.html&#x27;</span> &#125;,</span><br><span class="line">  ]</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;一个项目，两个页面，共用组件！没错，就是Multi Entry Point。&lt;/p&gt;</summary>
    
    
    
    
    <category term="react,javascript" scheme="https://www.vatery.com/tags/react-javascript/"/>
    
  </entry>
  
  <entry>
    <title>Laravel同时生成Logstash格式日志</title>
    <link href="https://www.vatery.com/2020/01/31/Laravel%E5%90%8C%E6%97%B6%E7%94%9F%E6%88%90Logstash%E6%A0%BC%E5%BC%8F%E6%97%A5%E5%BF%97/"/>
    <id>https://www.vatery.com/2020/01/31/Laravel%E5%90%8C%E6%97%B6%E7%94%9F%E6%88%90Logstash%E6%A0%BC%E5%BC%8F%E6%97%A5%E5%BF%97/</id>
    <published>2020-01-31T14:39:15.000Z</published>
    <updated>2023-01-09T15:42:51.595Z</updated>
    
    <content type="html"><![CDATA[<p>如果你需要将Laravel的日志倒入ELK进行统计查看，就会发现默认的日志格式并不能被Logstash认识，你需要进行各种正则判断，参数转换。如果你使用的是Laravel5.6以上版本，那么恭喜，有非常优雅的方案通过配置即可完成。</p><span id="more"></span><p>这里主要用到<code>channels</code>的方案，通过再自定义话配置一种日志记录方式来实现。</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>使用<code>stack</code> channel搭配，生成默认的日志和一份json形式的日志。</p><p>josn形式的日志通过<strong>monolog</strong>提供的方法实现。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>File: <code>config/logging.php</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;channels&#x27;</span> =&gt; [</span><br><span class="line">  <span class="string">&#x27;stack&#x27;</span> =&gt; [</span><br><span class="line">      <span class="string">&#x27;driver&#x27;</span> =&gt; <span class="string">&#x27;stack&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;channels&#x27;</span> =&gt; [<span class="string">&#x27;daliy&#x27;</span>, <span class="string">&#x27;logstash&#x27;</span>], <span class="comment">// channel的组合</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="string">&#x27;logstash&#x27;</span> =&gt; [</span><br><span class="line">      <span class="string">&#x27;driver&#x27;</span> =&gt; <span class="string">&#x27;monolog&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;level&#x27;</span> =&gt; <span class="string">&#x27;debug&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;handler&#x27;</span> =&gt; <span class="title class_">Monolog\Handler\RotatingFileHandler</span>::<span class="variable language_">class</span>,</span><br><span class="line">      <span class="string">&#x27;formatter&#x27;</span> =&gt; <span class="title class_">Monolog\Formatter\LogstashFormatter</span>::<span class="variable language_">class</span>,</span><br><span class="line">      <span class="string">&#x27;with&#x27;</span> =&gt; [</span><br><span class="line">          <span class="string">&#x27;filename&#x27;</span> =&gt; <span class="title function_ invoke__">storage_path</span>(<span class="string">&#x27;jsonlogs/laravel.log&#x27;</span>), <span class="comment">// 自定义文件存放路径</span></span><br><span class="line">          <span class="string">&#x27;maxFiles&#x27;</span> =&gt; <span class="number">14</span> <span class="comment">// 自定义最大文件保存数目</span></span><br><span class="line">      ],</span><br><span class="line">      <span class="string">&#x27;formatter_with&#x27;</span> =&gt; [</span><br><span class="line">          <span class="string">&#x27;applicationName&#x27;</span> =&gt; <span class="title function_ invoke__">env</span>(<span class="string">&#x27;APP_NAME&#x27;</span>), <span class="comment">// 自定义应用名称</span></span><br><span class="line">      ]</span><br><span class="line">  ],</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>这里看到使用<code>handler</code> 和<code>formatter</code>来搭配进行日志的处理和格式化。</p><p>其中Monolog默认库里提供可选用的有很多，具体看<a href="https://github.com/Seldaek/monolog/blob/master/doc/02-handlers-formatters-processors.md">文档</a>。</p><p>另外需要注意的则是<code>with</code> 和<code>formatter_with</code>两个参数，这是为<code>handler</code>和<code>formatter</code>分别实例化提供必要参数的方式，具体提供哪些必要参数可以查看Class的代码。</p><p>这样，就可以使用<strong>Filebeat</strong>来检测<code>jsonlogs/*.log</code>并上传到ELK中分析。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;如果你需要将Laravel的日志倒入ELK进行统计查看，就会发现默认的日志格式并不能被Logstash认识，你需要进行各种正则判断，参数转换。如果你使用的是Laravel5.6以上版本，那么恭喜，有非常优雅的方案通过配置即可完成。&lt;/p&gt;</summary>
    
    
    
    
    <category term="laravel" scheme="https://www.vatery.com/tags/laravel/"/>
    
  </entry>
  
  <entry>
    <title>在Esxi上安装群晖系统</title>
    <link href="https://www.vatery.com/2019/12/05/%E5%9C%A8Esxi%E4%B8%8A%E5%AE%89%E8%A3%85%E7%BE%A4%E6%99%96%E7%B3%BB%E7%BB%9F/"/>
    <id>https://www.vatery.com/2019/12/05/%E5%9C%A8Esxi%E4%B8%8A%E5%AE%89%E8%A3%85%E7%BE%A4%E6%99%96%E7%B3%BB%E7%BB%9F/</id>
    <published>2019-12-05T04:00:00.000Z</published>
    <updated>2023-01-09T15:42:51.595Z</updated>
    
    <content type="html"><![CDATA[<p>如果你想要一台高性能的NAS机器，但是又迫于经费不足；再或者不满于群晖的高价低配，那这里还有一种选择…</p><span id="more"></span><blockquote><p>本文大部分内容来自于一篇英文博客，本人完整测试通过。</p><p>参考原文：<a href="https://xpenology.com/forum/topic/13061-tutorial-install-dsm-62-on-esxi-67/">https://xpenology.com/forum/topic/13061-tutorial-install-dsm-62-on-esxi-67/</a></p></blockquote><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>设想：在Esxi中安装群晖系统，进行下载影视资料，运行Plex服务等；而白群晖的NAS机器受于其来自官方的支持，以及稳定低功耗的特性来运行照片、文档重要资料的备份。</p><h2 id="Esxi-Synology实战"><a href="#Esxi-Synology实战" class="headerlink" title="Esxi + Synology实战"></a>Esxi + Synology实战</h2><h3 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h3><ul><li>Esxi: 6.7</li><li>Synology: <a href="https://c-t.work/s/80c2be3ddc8246">DSM_DS3615</a></li><li>Client: macOS 10.15.1 with Firefox 70.0.1</li></ul><blockquote><p>无需使用windows转换软件，将img转换为Esxi专用文件</p></blockquote><h3 id="操作过程"><a href="#操作过程" class="headerlink" title="操作过程"></a>操作过程</h3><ol><li><p>下载DSM系统引导文件和安装文件<a href="https://c-t.work/s/80c2be3ddc8246">DSM_DS3615</a>（解压后包括：<code>synoboot.vmdk</code>，<code>synoboot.img</code>，<code>DSM_DS3615xs_15266.pat</code>）</p></li><li><p>将压缩文件解压，并把<code>synoboot.vmdk</code>和<code>synoboot.img</code>上传到Esxi的存储中</p></li><li><p>登录Esxi创建一个虚拟机</p><p><img src="https://xpenology.com/forum/uploads/monthly_2018_08/image.png.6e989b3218e3cc1587a25cfe9be84d0f.png"></p></li></ol><ol start="4"><li><p>输入创建的类型及名称</p><p><img src="https://xpenology.com/forum/uploads/monthly_2019_06/obraz.thumb.png.66a3ae1d509e572156d772f7fbe0d253.png"></p></li><li><p>重点在这一步</p><p><img src="https://xpenology.com/forum/uploads/monthly_2018_08/image.thumb.png.315e05a08ae9679b5da7b6e84852d284.png"></p><h4 id="需要删除的"><a href="#需要删除的" class="headerlink" title="需要删除的"></a>需要删除的</h4><ul><li>删除 <strong>SCSI控制器</strong></li><li>删除 <strong>默认硬盘</strong></li><li>删除 <strong>CD/DVD光驱</strong></li><li>删除 <strong>USB控制器</strong></li></ul><h4 id="需要调整的"><a href="#需要调整的" class="headerlink" title="需要调整的"></a>需要调整的</h4><ul><li>调整 <strong>CPU</strong>核心数（推荐1核以上）</li><li>调整 <strong>内存</strong>容量（推荐2G以上）</li><li>点开 <strong>网卡适配器</strong>，将适配器类型改为<code>E1000e</code>（如果不修改，将无法启动网络，局域网内无法发现DSM安装程序）</li></ul><h4 id="需要添加的"><a href="#需要添加的" class="headerlink" title="需要添加的"></a>需要添加的</h4><ul><li>添加其他设备，选择 <strong>SATA controller</strong></li></ul><p>点击「下一步」，然后点击「完成」。</p></li></ol><ol start="5"><li><p>让我们稍作休息，后边就是配置引导盘和系统安装盘的操作。</p></li><li><p>再次打开编辑该虚拟机配置</p><ul><li>添加硬盘（用于引导盘），选择「现有硬盘」，找到之前上传的<code>synoboot.vmdk</code>文件并选择；点开左侧小箭头，选择「虚拟设备节点」，确定为<code>SATA contoller 0</code>和<code>SATA(0:0)</code><img src="https://xpenology.com/forum/uploads/monthly_2018_08/image.thumb.png.aff0e1988324bb515e12db6e105178e8.png"></li><li>添加硬盘（用于系统安装挂载），选择「全新的硬盘」，分配容量（推荐20G以上）；点开左侧小箭头，同样选择「虚拟设备节点」，确定为<code>SATA controller 1</code>和<code>SATA(1:0)</code><img src="https://xpenology.com/forum/uploads/monthly_2018_08/image.thumb.png.98d57dec673ec56600679b0e9919f63c.png"></li><li>保存</li></ul></li><li><p>开机进行设置</p><ul><li>在开机时，终端控制界面会有一闪而过的启动选择项，所以在开机的一刻需要立马疯狂点击按键盘上方向「下箭头」（相信爱折腾的你单身多年是有这个手速的）</li><li>选择Esxi/VMware专用启动</li><li>显示该图则成功<img src="https://xpenology.com/forum/uploads/monthly_2018_08/image.thumb.png.b581d3da08dc2ba7504142719c223ddd.png"></li></ul></li><li><p>等待1分钟左右，在浏览器输入<a href="http://find.synology.com/">http://find.synology.com</a>，即会在局域网内进行搜索正在运行的群晖系统</p></li><li><p>没有问题的话就应该是这样<img src="https://xpenology.com/forum/uploads/monthly_2019_06/obraz.thumb.png.0ceec8eaa3debd80d46c4dceef33291d.png"></p></li><li><p>安装</p><ul><li><p><img src="https://xpenology.com/forum/uploads/monthly_2019_06/obraz.png.b22a7f749cc2280ca9ed5252797be19a.png"></p></li><li><p>需要选择手动安装<img src="https://xpenology.com/forum/uploads/monthly_2019_06/obraz.thumb.png.5a360438a4a0ce42dd3dca2283b11152.png"></p></li><li><p>将解压后的包内<code>DSM_DS3615xs_15266.pat</code>进行上传<img src="https://xpenology.com/forum/uploads/monthly_2019_06/obraz.thumb.png.7dfff1d1a8a74abd588ff513e1f4c273.png"></p></li></ul></li><li><p>静静等待<img src="https://xpenology.com/forum/uploads/monthly_2019_06/obraz.thumb.png.5bb4cb5f1d4603468dcd7f63f0077ee3.png"></p></li><li><p>设置必要信息<img src="https://xpenology.com/forum/uploads/monthly_2019_06/obraz.png.4449788f9ec2a5d869efe1932fd73c8a.png"></p></li><li><p>跳过<code>QuickConnect</code>设置（因为这是非官方注册设备的原因无法启用）<img src="https://xpenology.com/forum/uploads/monthly_2019_06/obraz.png.c4c295281eddb0dc047f405db00c1c3f.png"></p></li><li><p>全部完成<img src="https://xpenology.com/forum/uploads/monthly_2019_06/obraz.thumb.png.703c3b3470af4e32331b7207ea710dd7.png"></p></li></ol><blockquote><p>P.S. 完成后，不妨给你的虚拟机建立一个快照，防止玩坏翻车了还要重来。🤪</p></blockquote>]]></content>
    
    
    <summary type="html">&lt;p&gt;如果你想要一台高性能的NAS机器，但是又迫于经费不足；再或者不满于群晖的高价低配，那这里还有一种选择…&lt;/p&gt;</summary>
    
    
    
    
    <category term="synology,esxi,nas" scheme="https://www.vatery.com/tags/synology-esxi-nas/"/>
    
  </entry>
  
  <entry>
    <title>群晖硬盘挂载读取</title>
    <link href="https://www.vatery.com/2019/11/29/%E7%BE%A4%E6%99%96%E7%A1%AC%E7%9B%98%E6%8C%82%E8%BD%BD%E8%AF%BB%E5%8F%96/"/>
    <id>https://www.vatery.com/2019/11/29/%E7%BE%A4%E6%99%96%E7%A1%AC%E7%9B%98%E6%8C%82%E8%BD%BD%E8%AF%BB%E5%8F%96/</id>
    <published>2019-11-29T04:00:00.000Z</published>
    <updated>2023-01-09T15:42:51.595Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://ae01.alicdn.com/kf/H79e88ecdcd5141ec9cc0d25d3c42f2d6p.jpg"></p><p><strong>买了新的硬盘，或者DSM系统暴毙了，资料怎么办？</strong></p><span id="more"></span><p>当然要取出来，给小姐姐搬个更温暖舒适的家。</p><p>很正常的逻辑是，使用一个电脑，插上硬盘盒，将资料转入新的DSM系统。</p><p>这里有两个问题：</p><ol><li>群晖的硬盘，由于做了raid处理，所以文件系统识别为<code>linux_raid</code>，默认情况是下是无法直接<code>mount</code>的，提示文件系统不能识别；</li><li>Manjaro、ArchLinux等，虽然能正常运行读取raid配置信息命令，但无法读取到raid信息，提示<code>No arrays found in config file or automatically</code>，更换使用<em>Ubuntu</em>却可以。</li></ol><blockquote><p> macOS下无法读取该硬盘，虽然已经识别。经过多方资料查找，也寻到了官方的说明<a href="https://www.synology.com/zh-cn/knowledgebase/DSM/tutorial/Storage/How_can_I_recover_data_from_my_DiskStation_using_a_PC">文档</a>。手头正好有<em>Manjaro</em>，所以插入硬盘运行命令，但无法成功。</p></blockquote><p>所以，重点来了：<strong>需要制作一个Ubunut系统的U盘，进入Live CD模式</strong>，<em>terminal</em>中运行命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo su <span class="comment"># 切换到root</span></span><br><span class="line">apt-get install -y mdadm lvm2 <span class="comment"># 安装mdadm raid管理软件</span></span><br><span class="line">mdadm -Asf &amp;&amp; vgchange -ay <span class="comment"># 读取raid信息并挂载</span></span><br></pre></td></tr></table></figure><p>可以在<em>terminal</em>中使用scp同步到需要的系统上去。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://ae01.alicdn.com/kf/H79e88ecdcd5141ec9cc0d25d3c42f2d6p.jpg&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;买了新的硬盘，或者DSM系统暴毙了，资料怎么办？&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="synology" scheme="https://www.vatery.com/tags/synology/"/>
    
  </entry>
  
  <entry>
    <title>我的macOS平台下工作方案</title>
    <link href="https://www.vatery.com/2019/11/16/%E5%9C%A8macOS%E5%B9%B3%E5%8F%B0%E4%B8%8B%E7%9A%84%E9%AB%98%E6%95%88%E7%8E%87%E5%B7%A5%E4%BD%9C%E6%96%B9%E6%A1%88/"/>
    <id>https://www.vatery.com/2019/11/16/%E5%9C%A8macOS%E5%B9%B3%E5%8F%B0%E4%B8%8B%E7%9A%84%E9%AB%98%E6%95%88%E7%8E%87%E5%B7%A5%E4%BD%9C%E6%96%B9%E6%A1%88/</id>
    <published>2019-11-16T16:00:00.000Z</published>
    <updated>2023-01-09T15:42:51.595Z</updated>
    
    <content type="html"><![CDATA[<h1 id="我的macOS平台下工作方案"><a href="#我的macOS平台下工作方案" class="headerlink" title="我的macOS平台下工作方案"></a>我的macOS平台下工作方案</h1><hr><h2 id="软件介绍："><a href="#软件介绍：" class="headerlink" title="软件介绍："></a>软件介绍：</h2><h3 id="Homebrew包管理器"><a href="#Homebrew包管理器" class="headerlink" title="Homebrew包管理器"></a><a href="https://brew.sh/">Homebrew</a>包管理器</h3><blockquote><p>这是一个命令行软件，可能很多普通用户没有了解过也不喜欢这样的操作方式。但是我非常希望你能了解他，并使用它。它就是一个没有图形界面的软件仓库。</p></blockquote><p>这是一个包管理器，通过它你能够安装软件，而不需要去搜索引擎搜索，再进入官网找下载按钮进行下载。</p><p>首先打开终端软件（terminal），在launchpad中如果你是中文语言设定则搜索<strong>「终端」</strong>，英文为<strong>「terminal」</strong>。部分用户可能使用<code>iterm2</code>同理。</p><ol><li><p>首先登录官方网站安装<code>brew</code>：<a href="https://brew.sh/">https://brew.sh/</a></p></li><li><p>安装完成之后输入：</p></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew info qq</span><br></pre></td></tr></table></figure><p>可以搜索<code>qq</code></p><p>输出则是：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Error: No available formula with the name <span class="string">&quot;qq&quot;</span></span><br><span class="line">Found a cask named <span class="string">&quot;qq&quot;</span> instead.</span><br><span class="line"></span><br><span class="line">qq: 6.5.9</span><br><span class="line">https://im.qq.com/macqq/</span><br><span class="line">Not installed</span><br><span class="line">From: https://github.com/Homebrew/homebrew-cask/blob/master/Casks/qq.rb</span><br><span class="line">==&gt; Name</span><br><span class="line">QQ</span><br><span class="line">==&gt; Artifacts</span><br><span class="line">QQ.app (App)</span><br></pre></td></tr></table></figure><p>可以看到出现了<code>cask</code>这个单词，这是用来下载闭源的商业软件。</p><ol start="3"><li>实际安装qq</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew cask install qq</span><br></pre></td></tr></table></figure><p>通过这种方式，我们可以安装百分之90的软件，而不需要去打开浏览器寻找。</p><p><em>但有些朋友会发现，使用这个软件可能比较慢，可以使用<a href="https://mirrors.tuna.tsinghua.edu.cn/help/homebrew/">清华的源</a>，根据步骤进行操作即可。</em></p><ol start="4"><li>定期进行更新命令：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">brew update <span class="comment"># 更新软件源和版本信息等</span></span><br><span class="line">brew upgrade <span class="comment"># 升级软件</span></span><br></pre></td></tr></table></figure><p>使用brew还能给你带来什么便利？<strong>快速安装自己的软件！</strong></p><p>创建一个名为brew.sh文件，在里面把你需要的软件写入，然后同步这个文件，下次重装系统或者更换电脑，安装好homebrew后，在终端里执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash brew.sh</span><br></pre></td></tr></table></figure><p>都能一一顺利进行安装。</p><p>例如我的：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># complier</span></span><br><span class="line">brew install cmake</span><br><span class="line">brew install gcc</span><br><span class="line"></span><br><span class="line"><span class="comment"># CLI tools</span></span><br><span class="line">brew install mycli</span><br><span class="line">brew install stormssh</span><br><span class="line"></span><br><span class="line"><span class="comment"># cask apps</span></span><br><span class="line">brew install balenaetcher</span><br><span class="line">brew cask install sublime-text</span><br><span class="line">brew cask install iina</span><br><span class="line">brew cask install spotify</span><br><span class="line">brew cask install visual-studio-code</span><br><span class="line">brew cask install iterm2</span><br><span class="line">brew cask install docker</span><br><span class="line">brew cask install dash</span><br><span class="line">brew cask install slack</span><br><span class="line">brew cask install telegram</span><br><span class="line">brew cask install alfred</span><br><span class="line">brew cask install snipaste</span><br><span class="line">brew cask install 1password</span><br><span class="line">brew cask install dropbox</span><br><span class="line">brew cask install clashx</span><br><span class="line">brew cask install bartender</span><br><span class="line">brew cask install typora</span><br><span class="line">brew cask install goland</span><br><span class="line">brew cask install wechat</span><br><span class="line">brew cask install QQ</span><br><span class="line">brew cask install google-chrome</span><br><span class="line">brew cask install brave-browser</span><br><span class="line">brew cask install appcleaner</span><br><span class="line">brew cask install paw</span><br><span class="line">brew cask install notion</span><br><span class="line">brew cask install anydesk</span><br><span class="line">brew cask install Hammerspoon</span><br></pre></td></tr></table></figure><h2 id="CLI推荐"><a href="#CLI推荐" class="headerlink" title="CLI推荐"></a>CLI推荐</h2><h3 id="S-Search"><a href="#S-Search" class="headerlink" title="S Search"></a><a href="https://github.com/zquestz/s">S Search</a></h3><p>一个在终端，输入搜索快捷打开搜索引擎的命令。</p><h4 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s puppies</span><br></pre></td></tr></table></figure><h4 id="Install"><a href="#Install" class="headerlink" title="Install"></a>Install</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install s-search</span><br></pre></td></tr></table></figure><h3 id="autojump"><a href="#autojump" class="headerlink" title="autojump"></a><a href="https://github.com/wting/autojump">autojump</a></h3><p>快捷跳转到你想要的那个目录，不需要再一层层cd进入文件树。</p><h4 id="Demo-1"><a href="#Demo-1" class="headerlink" title="Demo"></a>Demo</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">j project1</span><br></pre></td></tr></table></figure><h4 id="Install-1"><a href="#Install-1" class="headerlink" title="Install"></a>Install</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install autojump</span><br></pre></td></tr></table></figure><h3 id="neovim"><a href="#neovim" class="headerlink" title="neovim"></a><a href="https://github.com/neovim/neovim">neovim</a></h3><p>是vim的替代品，但是它拥有更好的代码和可扩展性，同时提供API支持。</p><h4 id="Demo-2"><a href="#Demo-2" class="headerlink" title="Demo"></a>Demo</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvim file1.txt</span><br></pre></td></tr></table></figure><h4 id="Install-2"><a href="#Install-2" class="headerlink" title="Install"></a>Install</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install neovim</span><br></pre></td></tr></table></figure><h3 id="ffsend"><a href="#ffsend" class="headerlink" title="ffsend"></a><a href="https://github.com/timvisee/ffsend">ffsend</a></h3><p>Firefox Send的CLI支持，但是由于官方的<code>https://send.firefox.com</code>永久暂停服务了，所以目前运营的网站并不是官方的了。但由于send服务开源，你也可以自建搭建。</p><h4 id="Demo-3"><a href="#Demo-3" class="headerlink" title="Demo"></a>Demo</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffsend u file1.png</span><br></pre></td></tr></table></figure><h4 id="Install-3"><a href="#Install-3" class="headerlink" title="Install"></a>Install</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install ffsend</span><br></pre></td></tr></table></figure><h3 id="tinypng-cli"><a href="#tinypng-cli" class="headerlink" title="tinypng-cli"></a><a href="https://github.com/websperts/tinypng-cli">tinypng-cli</a></h3><p>著名图片压缩网站<a href="https://tinypng.com/">tinypng</a>的CLI支持</p><h4 id="Demo-4"><a href="#Demo-4" class="headerlink" title="Demo"></a>Demo</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tinypng img1.png</span><br></pre></td></tr></table></figure><h4 id="Install-4"><a href="#Install-4" class="headerlink" title="Install"></a>Install</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm -g install tinypng-cli</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;我的macOS平台下工作方案&quot;&gt;&lt;a href=&quot;#我的macOS平台下工作方案&quot; class=&quot;headerlink&quot; title=&quot;我的macOS平台下工作方案&quot;&gt;&lt;/a&gt;我的macOS平台下工作方案&lt;/h1&gt;&lt;hr&gt;
&lt;h2 id=&quot;软件介绍：&quot;&gt;&lt;a hr</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>移植onOneServer方法至Laravel5.2</title>
    <link href="https://www.vatery.com/2018/09/23/%E7%A7%BB%E6%A4%8DonOneServer%E6%96%B9%E6%B3%95%E8%87%B3Laravel5.2/"/>
    <id>https://www.vatery.com/2018/09/23/%E7%A7%BB%E6%A4%8DonOneServer%E6%96%B9%E6%B3%95%E8%87%B3Laravel5.2/</id>
    <published>2018-09-23T16:00:00.000Z</published>
    <updated>2023-01-09T15:42:51.595Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>如果您的应用程序在多个服务器上运行，则你可能会想限制计划任务仅在单个服务器上执行。 例如，您有一个计划任务，每个星期五晚上都会生成一个新报告。 如果在三台服务器上运行，则将在所有三台服务器上运行并生成三次报告。 这样不好！</p><p>为了让计划任务只在一台服务器上运行，在定义计划任务时可使用 <code>onOneServer</code> 方法。原理是获取到该任务的第一台服务器将对该任务加上原子锁，以防止其他服务器同时运行相同的任务。</p></blockquote><span id="more"></span><p>这是laravel-china文档上的说明。</p><p><code>onOneServer()</code>这个方法，在5.6才有，但是在我们的服务分布式部署情况下，却是十分需要的。</p><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>非常简单，第一个执行的节点对该任务加上原子锁。</p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>如何能够达到原子锁，那么最好使用redis。</p><p>在Laravel中的核心命令是: <code>Redis::add()</code>，</p><p>转换为Redis核心命令为：<code>setnx</code>，</p><p>该命令意义为：如果不存在，那么就SET。</p><p>该命令是原子性的，也就是说当第一个任务SET了值之后，后边其他相同的任务都会无法执行。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><ol><li><p>对Event类添加<code>onOneServer</code>方法及参数。</p><p> <code>vendor/laravel/framework/src/Illuminate/Console/Scheduling/Event.php</code></p> <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Event</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="comment">// 判断参数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$onOneServer</span> = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置函数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">onOneServer</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;onOneServer = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>运行时执行真正操作</p><p> <code>vendor/laravel/framework/src/Illuminate/Console/Scheduling/ScheduleRunCommand.php</code></p> <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Execute the console command.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> void</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">fire</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="keyword">foreach</span> (<span class="variable">$events</span> <span class="keyword">as</span> <span class="variable">$event</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (! <span class="variable">$event</span>-&gt;<span class="title function_ invoke__">filtersPass</span>(<span class="variable">$this</span>-&gt;laravel)) &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$event</span>-&gt;onOneServer) &#123; <span class="comment">// 是否只能运行在单个节点上</span></span><br><span class="line">            <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">runSingleServerEvent</span>(<span class="variable">$event</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">runEvent</span>(<span class="variable">$event</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ++<span class="variable">$eventsRan</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 将事件进行上锁处理</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> Event $event</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> void</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> vogan &lt;voganwong<span class="doctag">@gmail</span>.com&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">runSingleServerEvent</span>(<span class="params"><span class="variable">$event</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">$this</span>-&gt;schedule-&gt;<span class="title function_ invoke__">serverShouldRun</span>(<span class="variable">$event</span>)) &#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">runEvent</span>(<span class="variable">$event</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">line</span>(<span class="string">&#x27;&lt;info&gt;Skipping command (has already run on another server):&lt;/info&gt; &#x27;</span>.<span class="variable">$event</span>-&gt;<span class="title function_ invoke__">getSummaryForDisplay</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> <code>vendor/laravel/framework/src/Illuminate/Console/Scheduling/Schedule.php</code></p> <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">serverShouldRun</span>(<span class="params"><span class="variable">$event</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 创建一个锁，返回是否成功</span></span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;schedulingMutex-&gt;<span class="title function_ invoke__">create</span>(<span class="variable">$event</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> <code>vendor/laravel/framework/src/Illuminate/Console/Scheduling/SchedulingMutex.php</code></p> <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 对事件创建任务锁</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> Event $event</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> bool</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> vogan &lt;voganwong<span class="doctag">@gmail</span>.com&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">create</span>(<span class="params"><span class="variable">$event</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 最终调用的即是cache-&gt;add()方法，</span></span><br><span class="line">    <span class="comment">// key名为锁的名称，value为true，</span></span><br><span class="line">    <span class="comment">// 另外设置一个超时时间，防止任务执行失败，造成了一个死锁不释放。</span></span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;cache-&gt;<span class="title function_ invoke__">add</span>(</span><br><span class="line">        <span class="variable">$event</span>-&gt;<span class="title function_ invoke__">mutexName</span>(), <span class="literal">true</span>, <span class="variable">$event</span>-&gt;expiresAt</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;如果您的应用程序在多个服务器上运行，则你可能会想限制计划任务仅在单个服务器上执行。 例如，您有一个计划任务，每个星期五晚上都会生成一个新报告。 如果在三台服务器上运行，则将在所有三台服务器上运行并生成三次报告。 这样不好！&lt;/p&gt;
&lt;p&gt;为了让计划任务只在一台服务器上运行，在定义计划任务时可使用 &lt;code&gt;onOneServer&lt;/code&gt; 方法。原理是获取到该任务的第一台服务器将对该任务加上原子锁，以防止其他服务器同时运行相同的任务。&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    
    <category term="laravel" scheme="https://www.vatery.com/tags/laravel/"/>
    
  </entry>
  
  <entry>
    <title>Zabbix 3.4监控MySQL</title>
    <link href="https://www.vatery.com/2018/05/05/Zabbix3.4%E7%9B%91%E6%8E%A7MySQL/"/>
    <id>https://www.vatery.com/2018/05/05/Zabbix3.4%E7%9B%91%E6%8E%A7MySQL/</id>
    <published>2018-05-05T04:00:00.000Z</published>
    <updated>2023-01-09T15:42:51.595Z</updated>
    
    <content type="html"><![CDATA[<p>zabbix agent 3.4 已经默认支持监控，只需要简单配置。</p><ol><li><p>首先需要给MySQL设置一个zabbix读取数据的用户及密码（过程省略）；</p><blockquote><p>注意，这个用户不需要任何权限，登陆IP仅限localhost即可</p></blockquote></li><li><p>把MySQL的用户信息写入到zabbix能读到的位置；</p><blockquote><p>默认源安装的情况，即放置一个.my.cnf文件至<code>/etc/zabbix/</code>目录下</p><p># /etc/zabbix/.my.cnf</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[mysql]</span><br><span class="line">host=localhost</span><br><span class="line">user=zabbix</span><br><span class="line">password=zabbix</span><br><span class="line">socket=/var/lib/mysql/mysql.sock</span><br><span class="line">[mysqladmin]</span><br><span class="line">host=localhost</span><br><span class="line">user=zabbix</span><br><span class="line">password=zabbix</span><br><span class="line">socket=/var/lib/mysql/mysql.sock</span><br></pre></td></tr></table></figure></blockquote></li><li><p>修改zabbix监控MySQL数据库自定义脚本</p><blockquote><p><strong>注意HOME后面的路径需要是zabbix的配置根目录，存在<code>.my.cnf</code>文件</strong></p><p># /etc/zabbix/zabbix_agentd.d/userparameter_mysql.conf</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"># For all the following commands HOME should be set to the directory that has .my.cnf file with password information.</span><br><span class="line"></span><br><span class="line"># Flexible parameter to grab global variables. On the frontend side, use keys like mysql.status[Com_insert].</span><br><span class="line"># Key syntax is mysql.status[variable].</span><br><span class="line">UserParameter=mysql.status[*],echo &quot;show global status where Variable_name=&#x27;$1&#x27;;&quot; | HOME=/etc/zabbix mysql -N | awk &#x27;&#123;print $$2&#125;&#x27;</span><br><span class="line"></span><br><span class="line"># Flexible parameter to determine database or table size. On the frontend side, use keys like mysql.size[zabbix,history,data].</span><br><span class="line"># Key syntax is mysql.size[&lt;database&gt;,&lt;table&gt;,&lt;type&gt;].</span><br><span class="line"># Database may be a database name or &quot;all&quot;. Default is &quot;all&quot;.</span><br><span class="line"># Table may be a table name or &quot;all&quot;. Default is &quot;all&quot;.</span><br><span class="line"># Type may be &quot;data&quot;, &quot;index&quot;, &quot;free&quot; or &quot;both&quot;. Both is a sum of data and index. Default is &quot;both&quot;.</span><br><span class="line"># Database is mandatory if a table is specified. Type may be specified always.</span><br><span class="line"># Returns value in bytes.</span><br><span class="line"># &#x27;sum&#x27; on data_length or index_length alone needed when we are getting this information for whole database instead of a single table</span><br><span class="line">UserParameter=mysql.size[*],bash -c &#x27;echo &quot;select sum($(case &quot;$3&quot; in both|&quot;&quot;) echo &quot;data_length+index_length&quot;;; data|index) echo &quot;$3_length&quot;;; free) echo &quot;data_free&quot;;; esac)) from information_schema.tables$([[ &quot;$1&quot; = &quot;all&quot; || ! &quot;$1&quot; ]] || echo &quot; where table_schema=\&quot;$1\&quot;&quot;)$([[ &quot;$2&quot; = &quot;all&quot; || ! &quot;$2&quot; ]] || echo &quot;and table_name=\&quot;$2\&quot;&quot;);&quot; | HOME=/etc/zabbix mysql -N&#x27;</span><br><span class="line"></span><br><span class="line">UserParameter=mysql.ping,HOME=/etc/zabbix mysqladmin ping | grep -c alive</span><br><span class="line">UserParameter=mysql.version,mysql -V</span><br><span class="line"></span><br><span class="line">UserParameter=mysql.uptime,HOME=/etc/zabbix mysqladmin status | cut -f2 -d &quot;:&quot; | cut -f1 -d &quot;T&quot; | tr -d &quot; &quot;</span><br><span class="line">UserParameter=mysql.threads,HOME=/etc/zabbix mysqladmin status | cut -f3 -d &quot;:&quot; | cut -f1 -d &quot;Q&quot; | tr -d &quot; &quot;</span><br><span class="line">UserParameter=mysql.questions,HOME=/etc/zabbix mysqladmin status | cut -f4 -d &quot;:&quot;|cut -f1 -d &quot;S&quot; | tr -d &quot; &quot;</span><br><span class="line">UserParameter=mysql.slowqueries,HOME=/etc/zabbix mysqladmin status | cut -f5 -d &quot;:&quot; | cut -f1 -d &quot;O&quot; | tr -d &quot; &quot;</span><br><span class="line">UserParameter=mysql.qps,HOME=/etc/zabbix mysqladmin status | cut -f9 -d &quot;:&quot; | tr -d &quot; &quot;</span><br></pre></td></tr></table></figure></blockquote><p> <strong>测试能否获取到数据：</strong></p><p> agent节点上执行</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">azbbix_agentd -t &quot;mysql.status[Com_update]&quot;</span><br></pre></td></tr></table></figure><p> 如果有报错显示</p><p> <code>ERROR 2002 (HY000): Can&#39;t connect to local MySQL server through socket &#39;/var/run/mysqld/mysqld.sock&#39; (2)</code></p><p> 很显然，.my.cnf中配置的sock路径不对，找对相应的位置再测试即可。</p></li><li><p>最后，重启agent <code>service zabbix-agent restart</code> / <code>systemctl restart zabbix-agent</code>；</p><p> 并在zabbix web面板上配置添加MySQL的模板。</p></li><li><p>喝杯咖啡☕️，就能看见数据图了。</p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;zabbix agent 3.4 已经默认支持监控，只需要简单配置。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;首先需要给MySQL设置一个zabbix读取数据的用户及密码（过程省略）；&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;注意，这个用户不需要任何权限，登陆IP仅限localho</summary>
      
    
    
    
    
    <category term="linux,zabbix,mysql,monitor" scheme="https://www.vatery.com/tags/linux-zabbix-mysql-monitor/"/>
    
  </entry>
  
  <entry>
    <title>Jenkins Docker in Docker 部署</title>
    <link href="https://www.vatery.com/2018/05/05/jenkins-docker-in-docker/"/>
    <id>https://www.vatery.com/2018/05/05/jenkins-docker-in-docker/</id>
    <published>2018-05-05T04:00:00.000Z</published>
    <updated>2023-01-09T15:42:51.595Z</updated>
    
    <content type="html"><![CDATA[<p>通常情况，Docker作为容器级别的程序，会直接运行在高性能的宿主机上；或者宿主机上运行虚拟机，虚拟机内运行Docker容器；但是怎么会还有在Docker内运行Docker的容器这种需求呢？</p><span id="more"></span><p>这种情况主要是会发生在运行于容器内的CI服务（如Jenkins）。我们需要在构建服务中使用Docker提供的功能打包代码镜像，推送到私有仓库，再到发布节点拉取镜像启动发布。</p><p>有两种解决方案：</p><ol><li>在镜像内再次安装一边Docker-CE（镜像会增大100M左右）</li><li>共享宿主机的Docker进程，挂载sock和bin文件</li></ol><p>在这边主要尝试了第二种：</p><p>网络上现有的比较简单</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line">--name jenkins \</span><br><span class="line">-v /var/run/docker.sock:/var/run/docker.sock \</span><br><span class="line">-v $(which docker):/usr/bin/docker \</span><br><span class="line">-v /data/jenkins:/var/jenkins_home \</span><br><span class="line">-p 127.0.0.1:8080:8080 \</span><br><span class="line">jenkins:latest</span><br></pre></td></tr></table></figure><p>当你进入容器中尝试运行<code>docker ps</code>时，可能发生报错：</p><p><code>/usr/bin/docker: error while loading shared libraries: libltdl.so.7: cannot open shared object file: No such file or directory</code></p><p>无法加载依赖文件，这是由于原Jenkins的镜像中没有安装依赖包。</p><p>查寻解决方案也是挂载文件进入容器，但可能你会发现挂载了也不起作用。</p><p>容易让人想到的是，既然缺少依赖，不如在原版Jenkins镜像上加装再打包。</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> jenkins/jenkins:lts</span><br><span class="line"></span><br><span class="line"><span class="keyword">USER</span> root</span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> apt-get update \</span></span><br><span class="line"><span class="language-bash">      &amp;&amp; apt-get upgrade -y \</span></span><br><span class="line"><span class="language-bash">      &amp;&amp; apt-get install -y sudo libltdl-dev \</span></span><br><span class="line"><span class="language-bash">      &amp;&amp; <span class="built_in">rm</span> -rf /var/lib/apt/lists/*</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">echo</span> <span class="string">&quot;jenkins ALL=NOPASSWD: ALL&quot;</span> &gt;&gt; /etc/sudoers</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">USER</span> jenkins</span><br></pre></td></tr></table></figure><p>run起来之后，进入容器还是无法使用docker命令，Permission denied，原因是不在jenkins用户无法使用docker用户组的文件。加入用户组即可。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">gourp_docker=`cut -d: -f3 &lt; &lt;(getent group docker)`</span><br><span class="line"></span><br><span class="line">docker run -d --name jenkins \</span><br><span class="line">--group-add gourp_docker \</span><br><span class="line">-v /var/run/docker.sock:/var/run/docker.sock \</span><br><span class="line">-v $(which docker):/usr/bin/docker \</span><br><span class="line">-v /data/jenkins:/var/jenkins_home \</span><br><span class="line">-p 127.0.0.1:8080:8080 \</span><br><span class="line">jesusperales/jenkins-docker-run-inside</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;通常情况，Docker作为容器级别的程序，会直接运行在高性能的宿主机上；或者宿主机上运行虚拟机，虚拟机内运行Docker容器；但是怎么会还有在Docker内运行Docker的容器这种需求呢？&lt;/p&gt;</summary>
    
    
    
    
    <category term="jenkins,docker" scheme="https://www.vatery.com/tags/jenkins-docker/"/>
    
  </entry>
  
  <entry>
    <title>排序恶意请求的IP并在Nginx中Deny</title>
    <link href="https://www.vatery.com/2018/04/25/%E6%8E%92%E5%BA%8F%E6%81%B6%E6%84%8F%E8%AF%B7%E6%B1%82%E7%9A%84IP%E5%B9%B6%E5%9C%A8Nginx%E4%B8%ADDeny/"/>
    <id>https://www.vatery.com/2018/04/25/%E6%8E%92%E5%BA%8F%E6%81%B6%E6%84%8F%E8%AF%B7%E6%B1%82%E7%9A%84IP%E5%B9%B6%E5%9C%A8Nginx%E4%B8%ADDeny/</id>
    <published>2018-04-25T04:00:00.000Z</published>
    <updated>2023-01-09T15:42:51.595Z</updated>
    
    <content type="html"><![CDATA[<h2 id="这是一个Shell脚本："><a href="#这是一个Shell脚本：" class="headerlink" title="这是一个Shell脚本："></a>这是一个Shell脚本：</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cat</span> /var/log/nginx/api.access.log| awk <span class="string">&#x27;&#123;print $3&#125;&#x27;</span> | <span class="built_in">sort</span> | <span class="built_in">uniq</span> -c | <span class="built_in">sort</span> -n | <span class="built_in">tail</span> -n 100 | grep -v <span class="string">&#x27;-&#x27;</span>| sed --expression=<span class="string">&#x27;s/,//g&#x27;</span> |awk <span class="string">&#x27;&#123;if ($1&gt;300) print &quot;deny &quot; $2&quot;;&quot;&#125;&#x27;</span> &gt;&gt; /etc/nginx/conf.d/deny.conf</span><br><span class="line">nginx -s reload</span><br></pre></td></tr></table></figure><p>这里简单的做下解释，用于替换你自己的参数。</p><ul><li><code>/var/log/nginx/api.access.log</code>：你的<code>access.log</code>位置，默认为<code>/var/log/nginx/access.log</code></li><li><code>awk &#39;&#123;print $3&#125;&#39;</code>： 注意这里的<code>$3</code>，为我日志中配置的第三列<code>X-Forwarded-For </code>(用户IP, 代理服务器IP)。如果你没有自定义配置，和没有经过CDN，那么应该是第一列为用户IP，即<code>$1</code></li><li><code>| sort | uniq -c | sort -n | tail -n 100</code>：排序，且只取100个请求量最大的</li><li><code>grep -v &#39;-&#39;</code>：排除<code>-</code>有特殊符号的</li><li><code>sed --expression=&#39;s/,//g&#39;</code>：去除<code>,</code>（因为CDN中可能有多级代理存在）</li><li><code>awk &#39;&#123;if ($1&gt;300) print &quot;deny &quot; $2&quot;;&quot;&#125;&#39;</code>：取出请求量大于300的，并进行拼接格式为<code>deny 1.1.1.1;</code></li><li><code>&gt;&gt; /etc/nginx/conf.d/deny.conf</code>：追加写入到你的ngxin.conf能都读取到的文件</li><li><code>nginx -s reload</code>：重启Nginx😎</li></ul><h2 id="CND-amp-Real-IP"><a href="#CND-amp-Real-IP" class="headerlink" title="CND &amp; Real IP"></a>CND &amp; Real IP</h2><ol><li><p>Nginx在CND后，获取real ip：</p><p>正常CND会在Header里留存一个键用来放Client IP，一般为<code>X-Forwarded-For</code>。所以在Nginx的log_format中的参数为<code>$http_x_forwarded_for</code>，即可在日志中记录真实IP。</p></li><li><p>deny的时候不起作用？</p><p>原因是，Nginx默认拿到的IP不是你认为的Client IP，所以你需要指定</p><p><code>real_ip_header X-Forwarded-For;</code></p><p><code>set_real_ip_from 0.0.0.0/0;</code></p><p>注意下面的一句很重要，缺少也不可获取real ip。</p><p>​</p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;这是一个Shell脚本：&quot;&gt;&lt;a href=&quot;#这是一个Shell脚本：&quot; class=&quot;headerlink&quot; title=&quot;这是一个Shell脚本：&quot;&gt;&lt;/a&gt;这是一个Shell脚本：&lt;/h2&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;t</summary>
      
    
    
    
    
    <category term="linux,nginx,network" scheme="https://www.vatery.com/tags/linux-nginx-network/"/>
    
  </entry>
  
  <entry>
    <title>Vue+webpack+laravel开发</title>
    <link href="https://www.vatery.com/2017/04/24/Vue+webpack+laravel%E5%BC%80%E5%8F%91/"/>
    <id>https://www.vatery.com/2017/04/24/Vue+webpack+laravel%E5%BC%80%E5%8F%91/</id>
    <published>2017-04-24T04:00:00.000Z</published>
    <updated>2023-01-09T15:42:51.595Z</updated>
    
    <content type="html"><![CDATA[<p>这是一次现代化web全栈开发的首次尝试。</p><span id="more"></span><h2 id="概念和想法"><a href="#概念和想法" class="headerlink" title="概念和想法"></a>概念和想法</h2><p>使用前后端分离的架构，通过Http协议进行数据传输。</p><h2 id="Laravel-5-2-用到的技术"><a href="#Laravel-5-2-用到的技术" class="headerlink" title="Laravel 5.2 用到的技术"></a>Laravel 5.2 用到的技术</h2><ul><li>使用OAuth2.0 来进行验证用户及提供API权限问题</li><li>使用dingo API来实现API接口</li><li>API采用RESTful思想设计</li><li>使用云片网服务进行短信发送与验证</li><li>代码架构充分分离，分别为<ul><li>Controller（接受请求）</li><li>Service（处理主要逻辑）</li><li>Repository （处理数据库Model）</li><li>Presenters（处理模版页面逻辑 <strong>由于我是作为api service，所以不需要</strong> ）</li></ul></li></ul><h3 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h3><p>主要考虑了既然开发了通过API提供服务的后端，那么网站前端也使用相应的技术比较方便。</p><p>我选择了vue+webpack实现的单页面应用。</p><h4 id="webpack的全局变量"><a href="#webpack的全局变量" class="headerlink" title="webpack的全局变量"></a>webpack的全局变量</h4><p>当我需要使用开源的类库时，引入变成了一个问题。</p><p>例如jquery，当我在网上找了所有方法，并分别尝试了：</p><ul><li>在ProvidePlugin中当作插件载入</li><li>在main.js中require载入</li><li>使用expose-loader暴露全局</li></ul><p>均失败的结果，让我对自己的项目是否破损了产生怀疑。</p><p>后来，在一次搜索中发现有人和我遇到了同样的情况，各种方法尝试，在调用<code>$</code>会出现未定义的问题，但配置没问题。</p><p>有帮助者给出了解决方案：<a href="https://github.com/SimulatedGREG/electron-vue/issues/36">https://github.com/SimulatedGREG/electron-vue/issues/36</a></p><blockquote><p>It looks like you got everything setup properly. The error you are receiving is from ESLint’s no-undef rule. Since jQuery uses the global variable $ or jQuery, ESLint needs to be configured to know about it. Within your .eslintrc.js file, add them to globals.</p></blockquote><p> <code>.eslintrc.js</code></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="comment">// Other configs...</span></span><br><span class="line">  <span class="attr">&quot;globals&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;$&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;jQuery&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>也就是说<code>ESLint</code>需要配置，并设置为全局。</p><h4 id="components的组装"><a href="#components的组装" class="headerlink" title="components的组装"></a>components的组装</h4><p>在vue中，一个非常重要的理念就是使用component。可以提高开发效率，增加高复用性。</p><p>例如我在写后台管理页面时，会需要用到相同的<code>sidebar</code>，那么如何进行类似继承的复用，代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Router</span> <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">NotFoundView</span> <span class="keyword">from</span> <span class="string">&#x27;@/components/public/404&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">DashBoard</span> <span class="keyword">from</span> <span class="string">&#x27;@/components/public/dashboard&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">AnalyticView</span> <span class="keyword">from</span> <span class="string">&#x27;@/components/analytic/show&#x27;</span></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Router</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">Router</span>(&#123;</span><br><span class="line">  <span class="attr">routes</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">      <span class="attr">component</span>: <span class="title class_">DashBoard</span>,</span><br><span class="line">      <span class="attr">children</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">path</span>: <span class="string">&#x27;analytic&#x27;</span>,</span><br><span class="line">          <span class="attr">component</span>: <span class="title class_">AnalyticView</span>,</span><br><span class="line">          <span class="attr">name</span>: <span class="string">&#x27;analytic&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;<span class="comment">// not found handler</span></span><br><span class="line">      <span class="attr">path</span>: <span class="string">&#x27;*&#x27;</span>,</span><br><span class="line">      <span class="attr">component</span>: <span class="title class_">NotFoundView</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>注意，这里的<code>dashborad.vue</code>的代码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">lang</span>=<span class="string">&quot;html&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;dashboard&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">sidebar</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;main&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> <span class="title class_">Sidebar</span> <span class="keyword">from</span> <span class="string">&#x27;./sidebar&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">name</span>: <span class="string">&#x27;Dashboard&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">components</span>: &#123; <span class="title class_">Sidebar</span> &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">lang</span>=<span class="string">&quot;stylus&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.main</span></span></span><br><span class="line"><span class="language-css">    <span class="attribute">margin-left</span> <span class="number">120px</span></span></span><br><span class="line"><span class="language-css">    <span class="attribute">margin-right</span> <span class="number">20px</span></span></span><br><span class="line"><span class="language-css">    <span class="attribute">margin-top</span> <span class="number">20px</span></span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>需要将<code>&lt;router-view&gt;&lt;/router-view&gt;</code>继续往下传递。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;这是一次现代化web全栈开发的首次尝试。&lt;/p&gt;</summary>
    
    
    
    
    <category term="vue,webpack,laravel,web" scheme="https://www.vatery.com/tags/vue-webpack-laravel-web/"/>
    
  </entry>
  
  <entry>
    <title>深入学习HTML及CSS笔记</title>
    <link href="https://www.vatery.com/2017/01/25/%E6%B7%B1%E5%85%A5%E5%AD%A6%E4%B9%A0HTML%E5%8F%8ACSS%E7%AC%94%E8%AE%B0/"/>
    <id>https://www.vatery.com/2017/01/25/%E6%B7%B1%E5%85%A5%E5%AD%A6%E4%B9%A0HTML%E5%8F%8ACSS%E7%AC%94%E8%AE%B0/</id>
    <published>2017-01-25T06:00:00.000Z</published>
    <updated>2023-01-09T15:42:51.595Z</updated>
    
    <content type="html"><![CDATA[<p>记录一些不怎么熟悉的小特性</p><span id="more"></span><h2 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h2><h3 id="table布局"><a href="#table布局" class="headerlink" title="table布局"></a>table布局</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">display</span>: table;</span><br><span class="line"><span class="attribute">display</span>: table-cell;</span><br></pre></td></tr></table></figure><p>对于新时代来说，旧的table布局模式已经落伍，都采用了DIV（盒子）模型来构成页面的结构。但有时仍会用到table的一些特性，那么可以在CSS中，对盒子加入这个代码来实现。</p><h3 id="class选择器"><a href="#class选择器" class="headerlink" title="class选择器"></a>class选择器</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span><span class="selector-attr">[class^=<span class="string">&#x27;col-&#x27;</span>]</span> &#123;&#125;</span><br></pre></td></tr></table></figure><p>非常有意思，这个选择器规则类似正则：选择以<code>col-</code>开头的所有div。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span><span class="selector-attr">[class$=<span class="string">&#x27;col-&#x27;</span>]</span> &#123;&#125; # 相同的也有以col-结尾的</span><br></pre></td></tr></table></figure><p>详细链接：<a href="https://www.impressivewebs.com/css3-attribute-selectors-substring-matching/">https://www.impressivewebs.com/css3-attribute-selectors-substring-matching/</a></p><h3 id="before-after-伪元素"><a href="#before-after-伪元素" class="headerlink" title="::before / ::after 伪元素"></a><code>::before</code> / <code>::after</code> 伪元素</h3><p>用法类似这样：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span><span class="selector-pseudo">::before</span>,</span><br><span class="line"><span class="selector-tag">p</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">&quot;&quot;</span>;</span><br><span class="line">  <span class="attribute">clear</span>:both;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也可以用单引号来使用，IE8支持，但是用双引号也是有特别用意的：<strong>与伪类区分开</strong><br>伪类就是类似于：<code>:hover</code>  <code>:link</code>  <code>:focus</code></p><p>经常在检查元素时能看到，那么具体的作用是什么？<br>就是给指定元素的前面／后面插入一个额外的元素，这个元素不存在，但是能够正常显示。<em>（伪的由来）</em></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;记录一些不怎么熟悉的小特性&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>网站迁移及环境配置那些事儿</title>
    <link href="https://www.vatery.com/2016/07/06/%E7%BD%91%E7%AB%99%E8%BF%81%E7%A7%BB%E5%8F%8A%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E9%82%A3%E4%BA%9B%E4%BA%8B%E5%84%BF/"/>
    <id>https://www.vatery.com/2016/07/06/%E7%BD%91%E7%AB%99%E8%BF%81%E7%A7%BB%E5%8F%8A%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E9%82%A3%E4%BA%9B%E4%BA%8B%E5%84%BF/</id>
    <published>2016-07-06T04:00:00.000Z</published>
    <updated>2023-01-09T15:42:51.595Z</updated>
    
    <content type="html"><![CDATA[<h2 id="原来的站点被DDos了"><a href="#原来的站点被DDos了" class="headerlink" title="原来的站点被DDos了"></a>原来的站点被DDos了</h2><p>最初是放在韩国的kt上的，考虑到中国到韩国的速度较快，所以访问方面没有一点问题。</p><p>但昨天凌晨kt把机子关了，说遭到了DDos的攻击，峰值达到7.6G。虽然只是很小的流量，但服务器商就是关了，还说要关24h。重新开启之后，会换IP，要么买他家的抗D服务，10G100刀，真是抢钱了 。</p><p>网站流量虽然不大，但是还是有人随时访问的，宕机一天的损失也是挺大的。考虑到腊鸡kt说关就关还坑钱，毅然决定搬出来。</p><p>了解到ovh的机子都是无限量抗D，但是由于机房大多在加拿大那种十万八千里的地方，而我家客流大多是国内的，访问速度肯定惨不忍睹。</p><p>最后选到一家综合性价比不错，还带cn2的，可买抗D防护的，<a href="https://www.globalfrag.com./">https://www.globalfrag.com。</a></p><p>另外毫无疑问的上了cloudflare的cdn。</p><p>速度是变慢了，但是保障多了。</p><h2 id="oneinstack的问题"><a href="#oneinstack的问题" class="headerlink" title="oneinstack的问题"></a>oneinstack的问题</h2><p>本来的机子上是自己用yum装个lnmp。正好迁移图着简单配置，所以准备试试oneinstack的脚本。</p><p>实话说脚本的易用性还是可以的。</p><p>但尴尬的地方也来了。</p><ul><li><p>一键脚本编译安装，官方连个比较正式点的文档都没，没说各个软件的配置文件的路径在哪，在安装结束时会打印一下，但是谁能一下记住。</p></li><li><p>网站需要用到fileinfo的扩展，我自己装的时候是自带的，发现用脚本居然没有编译进去。然后就是一晚上的安装这个插件。从需要安装pecl到，fileinfo需要和php版本对应，反正各种报错，我都要放弃了。之后发现，可以去下个php的源码，解压进去找到fileinfo进行编译安装。并在php.ini中加入扩展fileinfo.so。</p><p>今早才发现oneinstack上有人和我遇到同样的问题（原文链接<a href="https://oneinstack.com/question/lnmp-why-fileinfo-extension/%EF%BC%89%EF%BC%8C%E5%AE%98%E6%96%B9%E8%A7%A3%E7%AD%94%E8%AF%B4%EF%BC%8C%E8%80%83%E8%99%91%E5%88%B0%E7%BC%96%E8%AF%91%E8%BF%99%E4%B8%AA%E6%97%B6%E9%97%B4%E8%BE%83%E9%95%BF%EF%BC%8C%E5%B0%8F%E9%B8%A1%E5%8F%AF%E8%83%BD%E5%90%83%E4%B8%8D%E6%B6%88%EF%BC%8C%E6%89%80%E4%BB%A5%E6%B2%A1%E6%9C%89%E9%BB%98%E8%AE%A4%E7%BC%96%E8%AF%91%E8%BF%9B%E5%8E%BB%EF%BC%8C%E5%9C%A8oneinstack%E7%9A%84%E6%96%87%E4%BB%B6%E5%A4%B9%E9%87%8C%E4%BF%9D%E7%95%99%E4%BA%86%E5%AE%89%E8%A3%85%E7%9A%84php%E7%89%88%E6%9C%AC%E7%9A%84%E5%8C%85%E3%80%82">https://oneinstack.com/question/lnmp-why-fileinfo-extension/），官方解答说，考虑到编译这个时间较长，小鸡可能吃不消，所以没有默认编译进去，在oneinstack的文件夹里保留了安装的php版本的包。</a></p></li></ul><h2 id="PHP的坑"><a href="#PHP的坑" class="headerlink" title="PHP的坑"></a>PHP的坑</h2><p>之前的站点用的php7.0，本地开发环境也一样，当函数命名为new时没有问题，但当现在的环境换到5.6之后，开始报错了。一查发现这是PHP的保留词，好吧我孤陋寡闻了。看来7.0完善并使之成为了feature。</p><h2 id="晚上又打了两波"><a href="#晚上又打了两波" class="headerlink" title="晚上又打了两波"></a>晚上又打了两波</h2><p>峰值不高，就是死耗。</p><p>即使上了cloudflare的cdn，免费版也直接打出源IP，后来就不打域名，直接打IP了。</p><p>攻击有500G流量了。</p><p>人艰不拆，若无杀父之仇，还请手下留情。</p><h2 id="7-8-更新"><a href="#7-8-更新" class="headerlink" title="7.8 更新"></a>7.8 更新</h2><p>已找到打手，说对方花了150/天，打10天。</p><p>果然是友商的攻击。</p><p>后来把idcf的机子都打到删除账号了。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;原来的站点被DDos了&quot;&gt;&lt;a href=&quot;#原来的站点被DDos了&quot; class=&quot;headerlink&quot; title=&quot;原来的站点被DDos了&quot;&gt;&lt;/a&gt;原来的站点被DDos了&lt;/h2&gt;&lt;p&gt;最初是放在韩国的kt上的，考虑到中国到韩国的速度较快，所以访问方面没</summary>
      
    
    
    
    
    <category term="web,linux" scheme="https://www.vatery.com/tags/web-linux/"/>
    
  </entry>
  
  <entry>
    <title>ssl的那些事儿</title>
    <link href="https://www.vatery.com/2016/06/26/ssl%E7%9A%84%E9%82%A3%E4%BA%9B%E4%BA%8B%E5%84%BF/"/>
    <id>https://www.vatery.com/2016/06/26/ssl%E7%9A%84%E9%82%A3%E4%BA%9B%E4%BA%8B%E5%84%BF/</id>
    <published>2016-06-26T16:00:00.000Z</published>
    <updated>2023-01-09T15:42:51.595Z</updated>
    
    <content type="html"><![CDATA[<h2 id="最近配置ssl的一些了解"><a href="#最近配置ssl的一些了解" class="headerlink" title="最近配置ssl的一些了解"></a>最近配置ssl的一些了解</h2><p>因为客户要求使用https来进行网站访问，考虑到传输安全的因素，我也去 <a href="https://www.ssls.com/">https://www.ssls.com</a> 买了一个比较便宜的证书，从属于Comodo。</p><blockquote><p>SSL的证书需要由权威机构进行颁发。</p><p>原因是，权威机构很权威，具有较高的资质和技术保障，相当于你为什么把钱存在中国银行，而不是别人的手中。</p><p>如果某家机构违法了规定，任意或恶意颁发证书，那么这家机构的证书都可能会被不认同。例如沃通🤔。</p></blockquote><p>目前环境：</p><ul><li>CentOS 6.6</li><li>Apache 2.2</li><li>PHP 7.0.6</li><li>MySQL  5.1</li></ul><p>具体步骤如下：</p><ol><li><p>在自己的服务器上产生自身的私钥和公钥</p><p>(密钥长度至少为1024位，不建议4096。加密过度复杂，安全性会提高，但是相应的cpu计算量也会增大，如果你的机器配置较低，光加解密会消耗大量时间)。</p></li><li><p>然后生成根数字证书，并且将数字证书传输给证书商。</p></li><li><p>之后就能下载一个txt文件（文件名数字和英文混合），里面有一个随机的认证字符串和comodoca.com。</p><p>把它放在通过域名后加文件名能直接访问到的公共目录下，便于认证服务器确认。</p></li><li><p>等待几分钟后，能在证书商那下载相应的证书，并上传至你的服务器。</p></li><li><p>在conf.d/ssl.conf中修改相应的证书位置。并重启Apache。</p></li><li><p>几分钟内就能生效。</p></li></ol><p><em>P.S. 之中向ssls的客服请教了很多，并一一获得答疑，服务态度很不错。</em></p><h2 id="其他一些注意事项"><a href="#其他一些注意事项" class="headerlink" title="其他一些注意事项"></a>其他一些注意事项</h2><h3 id="http向https跳转的问题"><a href="#http向https跳转的问题" class="headerlink" title="http向https跳转的问题"></a>http向https跳转的问题</h3><p>即80端口强制跳转到443端口，在服务端使用301状态码。</p><p>因为我的是Apache服务端，所以用的自然是rewrite模块。</p><p>可以</p><ol><li>通过http.conf（不建议）</li><li>vhost中的配置</li><li>站点根目录下的.htaccess修改</li></ol><p>推荐配置：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">RewriteEngine on</span><br><span class="line">RewriteCond %&#123;HTTPS&#125; off</span><br><span class="line">RewriteRule ^ https://%&#123;HTTP_HOST&#125;%&#123;REQUEST_URI&#125;</span><br></pre></td></tr></table></figure><h3 id="upyun的CDN服务"><a href="#upyun的CDN服务" class="headerlink" title="upyun的CDN服务"></a>upyun的CDN服务</h3><p>如果你的站点使用了cdn，那么需要在cdn的服务商那上传你的证书，让服务商分发到各个边缘节点，用于缓存数据。</p><p>否则无法使用https访问。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;最近配置ssl的一些了解&quot;&gt;&lt;a href=&quot;#最近配置ssl的一些了解&quot; class=&quot;headerlink&quot; title=&quot;最近配置ssl的一些了解&quot;&gt;&lt;/a&gt;最近配置ssl的一些了解&lt;/h2&gt;&lt;p&gt;因为客户要求使用https来进行网站访问，考虑到传输安全的因</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Linux安全攻防的那些事儿</title>
    <link href="https://www.vatery.com/2016/04/02/Linux%E5%AE%89%E5%85%A8%E6%94%BB%E9%98%B2%E7%9A%84%E9%82%A3%E4%BA%9B%E4%BA%8B%E5%84%BF/"/>
    <id>https://www.vatery.com/2016/04/02/Linux%E5%AE%89%E5%85%A8%E6%94%BB%E9%98%B2%E7%9A%84%E9%82%A3%E4%BA%9B%E4%BA%8B%E5%84%BF/</id>
    <published>2016-04-02T04:00:00.000Z</published>
    <updated>2023-01-09T15:42:51.595Z</updated>
    
    <content type="html"><![CDATA[<h2 id="看了日志我才吓一跳"><a href="#看了日志我才吓一跳" class="headerlink" title="看了日志我才吓一跳"></a>看了日志我才吓一跳</h2><p><strong>不多说，先上图。</strong></p><p><img src="http://ww3.sinaimg.cn/large/005R1IGWjw1f4jcqnbqpwj30pa0u6td1.jpg"></p><p>这是一台服务器上的登录失败的纪录，前面的是尝试次数，后面的是IP。<br>查过排第一的那个IP，来自国内。当然，攻击者也有很多其它国家的，不多评论。</p><p><em>查询命令为：（适用于CentOS）</em></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep <span class="string">&quot;Failed password for root&quot;</span> /var/log/secure | awk <span class="string">&#x27;&#123;print $11&#125;&#x27;</span> | <span class="built_in">sort</span> | <span class="built_in">uniq</span> -c | <span class="built_in">sort</span> -nr | more</span><br></pre></td></tr></table></figure><p>看到这里，首要的步骤就是，更换密码。<br>之前用的弱密码，我想可能极有可能已经被破解。立马换成包含英文、数字、特殊字符的高强度长密码，如此可提高安全性。之后将自己的rsa公钥添加到服务器，方便登录。（<em>另外可以实施的措施有，更换ssh端口，默认为22；关闭密码登录；避免使用root帐户登录</em>）</p><p>实际上你允许小偷来你家门锁上尝试各种钥匙，虽然自己有很大把握他无法打开，但还是存在几率的。</p><p>如果只允许开门的人尝试限定的次数，例如3次，不成功那么把他认为是不怀好意，直接在门卫那里拦下，如此更加巩固。</p><p>经过Google之后，我发现有类似限制登录的程序存在，我就挑选了一个叫做DenyHosts的Python脚本。</p><p>简单的安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install denyhosts</span><br></pre></td></tr></table></figure><p>安装完毕，启动服务即可。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service denyhosts start</span><br></pre></td></tr></table></figure><p>随即查看日志记录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">tail</span> -f /var/log/secure</span><br></pre></td></tr></table></figure><p>结束后，就有一封来自DenyHosts的邮件，内容是关于被屏蔽的IP列表。<br>使用默认配置就非常省心。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;看了日志我才吓一跳&quot;&gt;&lt;a href=&quot;#看了日志我才吓一跳&quot; class=&quot;headerlink&quot; title=&quot;看了日志我才吓一跳&quot;&gt;&lt;/a&gt;看了日志我才吓一跳&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;不多说，先上图。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=</summary>
      
    
    
    
    
    <category term="linux" scheme="https://www.vatery.com/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>iptables简单拒绝访问指定网址</title>
    <link href="https://www.vatery.com/2016/03/10/iptables%E7%AE%80%E5%8D%95%E6%8B%92%E7%BB%9D%E8%AE%BF%E9%97%AE%E6%8C%87%E5%AE%9A%E7%BD%91%E5%9D%80/"/>
    <id>https://www.vatery.com/2016/03/10/iptables%E7%AE%80%E5%8D%95%E6%8B%92%E7%BB%9D%E8%AE%BF%E9%97%AE%E6%8C%87%E5%AE%9A%E7%BD%91%E5%9D%80/</id>
    <published>2016-03-10T04:00:00.000Z</published>
    <updated>2023-01-09T15:42:51.595Z</updated>
    
    <content type="html"><![CDATA[<p>为了防止开放的小鸡流量过快用掉和支撑不起高负荷转发。</p><p>简单的iptabels规则：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iptables -I OUTPUT -p tcp -m string --string <span class="string">&quot;qq.com&quot;</span> --algo bm -j DROP</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iptables -I OUTPUT -p udp -m string --string <span class="string">&quot;qq.com&quot;</span> --algo bm -j DROP</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;为了防止开放的小鸡流量过快用掉和支撑不起高负荷转发。&lt;/p&gt;
&lt;p&gt;简单的iptabels规则：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;</summary>
      
    
    
    
    
    <category term="linux" scheme="https://www.vatery.com/tags/linux/"/>
    
  </entry>
  
</feed>
